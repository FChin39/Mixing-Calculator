"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const helper_plugin_utils_1 = require("@babel/helper-plugin-utils");
const t = __importStar(require("@babel/types"));
const helpers = __importStar(require("./helpers"));
const constants_1 = require("./constants");
const noop = t.jsxExpressionContainer(t.arrowFunctionExpression([], t.blockStatement([]), false));
const addAttribute = (node, name, value) => {
    node.openingElement.attributes.push(t.jsxAttribute(t.jsxIdentifier(name), value));
};
const DEPRECATED_CATCH_ATTRS = [
    'catchClick',
    'catchTap',
    'catchLongClick',
    'catchLongTap',
    'catchTouchMove',
    'catchTouchStart',
    'catchTouchEnd',
];
function throwOnDeprecatedCatchAttr(attrs) {
    attrs.forEach(attr => {
        if (t.isJSXSpreadAttribute(attr)) {
            return;
        }
        if (!t.isJSXIdentifier(attr.name)) {
            return;
        }
        if (DEPRECATED_CATCH_ATTRS.includes(attr.name.name)) {
            throw new Error(`Remax 支持在 onClick/onTap 等支持冒泡的事件中使用 event.stopPropagation 阻止事件冒泡，请不要使用 ${attr.name.name}`);
        }
    });
}
/**
 * 预处理 JSX 中的一些逻辑，方便后续收集静态模板和处理数据结构
 *
 * @export
 * @returns
 */
function preprocess(options) {
    return helper_plugin_utils_1.declare(() => {
        return {
            visitor: {
                JSXExpressionContainer(path) {
                    const node = path.node;
                    // 清除空表达式
                    if (t.isJSXEmptyExpression(node.expression)) {
                        path.remove();
                        return;
                    }
                    // case plain text leaf
                    // 父节点被标记为单文本节点的表达式情况
                    // 不对表达式做处理
                    if (helpers.isPlainTextLeaf(path.parentPath.node, path.parentPath, options)) {
                        return;
                    }
                    /**
                     * 父元素不是 host component 也不处理，因为父元素不能被静态化，子元素就没必要可遍历
                     */
                    if (t.isJSXElement(path.parent) && !helpers.isHostComponentElement(path.parent, path.parentPath, options)) {
                        return;
                    }
                    if (t.isJSXElement(path.parent) &&
                        constants_1.SKIP_ELEMENTS.includes(path.parent.openingElement.name.name)) {
                        return;
                    }
                    // case block
                    // 默认都按照 block 处理，对表达式的节点做遍历渲染
                    helpers.wrappedByExpressionBlock(node, path);
                },
                JSXElement(path) {
                    const node = path.node;
                    const attributes = node.openingElement.attributes;
                    throwOnDeprecatedCatchAttr(attributes);
                    /**
                     *  为 remax-plugin-spm 开的后门
                     */
                    if (attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'data-aspm-expo')) {
                        if (!attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'onAppear')) {
                            addAttribute(node, 'onAppear', noop);
                        }
                        if (!attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'onFirstAppear')) {
                            addAttribute(node, 'onFirstAppear', noop);
                        }
                    }
                    if (attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'data-aspm-click')) {
                        if (!attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'onTap') &&
                            !attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'onClick') &&
                            !attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'catchTap')) {
                            addAttribute(node, 'onTap', noop);
                        }
                    }
                    // case: React.Fragment
                    // 将 React Fragment 转换成 JSXFragment，方便处理
                    if (helpers.isReactFragment(node, path)) {
                        helpers.replacedWithJSXFragment(node, path);
                        return;
                    }
                    // case: Host Component Tag
                    // Host Component 不处理
                    if (helpers.isHostComponentElement(node, path, options)) {
                        return;
                    }
                    /**
                     * 父元素不是 host component 也不处理，因为父元素不能被静态化，子元素就没必要可遍历
                     */
                    if (t.isJSXElement(path.parent) && !helpers.isHostComponentElement(path.parent, path.parentPath, options)) {
                        return;
                    }
                    helpers.wrappedByExpressionBlock(node, path);
                },
            },
        };
    });
}
exports.default = preprocess;
