"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasChildrenAttribute = exports.hasSpreadAttribute = exports.normalizeLiteral = exports.isEmptyText = exports.replacedWithJSXFragment = exports.wrappedByExpressionBlock = exports.wrappedByElement = exports.isPlainTextLeaf = exports.getTemplateID = exports.getLeafAttribute = exports.getAttributeByName = exports.isReactFragment = exports.isExpressionBlock = exports.isHostComponentElement = exports.getHostComponentName = void 0;
const t = __importStar(require("@babel/types"));
const constants_1 = require("./constants");
const cleanJSXElementLiteralChild_1 = __importDefault(require("./helpers/cleanJSXElementLiteralChild"));
/**
 * 从 JSXElement 中取出 Host Component 的名称
 * 必须已经确定是 JSXElement 属于 Host Component
 * 可以通过 isHostComponent 判断
 */
function getHostComponentName(node, path) {
    if (t.isJSXIdentifier(node.openingElement.name)) {
        const tag = node.openingElement.name.name;
        const binding = path.scope.getBinding(tag);
        if (!binding) {
            return tag;
        }
        const importPath = binding.path;
        if (importPath && t.isImportSpecifier(importPath.node) && t.isIdentifier(importPath.node.imported)) {
            return importPath.node.imported.name;
        }
        return tag;
    }
    if (t.isJSXMemberExpression(node.openingElement.name)) {
        const property = node.openingElement.name.property;
        return property.name;
    }
}
exports.getHostComponentName = getHostComponentName;
/**
 * 判断 JSXElement 是否是 Host Component
 */
function isHostComponentElement(node, path, options) {
    if (t.isJSXFragment(node)) {
        return false;
    }
    /**
     * case:
     * import { View, View as CustomView } from 'components';
     * <View></View>
     * <CustomView></CustomView>
     */
    if (t.isJSXIdentifier(node.openingElement.name)) {
        const tag = node.openingElement.name.name;
        const binding = path.scope.getBinding(tag);
        if (!binding) {
            // EXPRESSION_BLOCK 是 'block' 标签，也是 host component
            if (tag === constants_1.EXPRESSION_BLOCK) {
                return true;
            }
            return false;
        }
        const importPath = binding.path;
        if (importPath &&
            t.isImportSpecifier(importPath.node) &&
            t.isImportDeclaration(importPath.parent) &&
            options.isHostComponentPackage(importPath.parent.source.value)) {
            return true;
        }
        return false;
    }
    /**
     * case:
     * import * as Com from 'components';
     * <Com.View></Com.View>
     */
    if (t.isJSXMemberExpression(node.openingElement.name)) {
        const object = node.openingElement.name.object;
        if (!t.isJSXIdentifier(object)) {
            return false;
        }
        const binding = path.scope.getBinding(object.name);
        if (!binding) {
            return false;
        }
        const importPath = binding.path;
        if (importPath &&
            t.isImportNamespaceSpecifier(importPath.node) &&
            t.isImportDeclaration(importPath.parent) &&
            options.isHostComponentPackage(importPath.parent.source.value)) {
            return true;
        }
        return false;
    }
    return false;
}
exports.isHostComponentElement = isHostComponentElement;
/**
 * 判断是否是 expression block
 */
function isExpressionBlock(path) {
    var _a, _b, _c;
    return ((_c = (_b = (_a = path === null || path === void 0 ? void 0 : path.node) === null || _a === void 0 ? void 0 : _a.openingElement) === null || _b === void 0 ? void 0 : _b.name) === null || _c === void 0 ? void 0 : _c.name) === constants_1.EXPRESSION_BLOCK;
}
exports.isExpressionBlock = isExpressionBlock;
/**
 * 判断是否是 <React.Fragment></React.Fragment> 或 <></>
 */
function isReactFragment(node, path) {
    if (t.isJSXFragment(node)) {
        return true;
    }
    /**
     * case:
     * import { Fragment } from 'react';
     * <Fragment></Fragment>
     */
    if (t.isJSXIdentifier(node.openingElement.name)) {
        const tag = node.openingElement.name.name;
        const binding = path.scope.getBinding(tag);
        if (!binding) {
            return false;
        }
        const importPath = binding.path;
        if (importPath &&
            t.isImportSpecifier(importPath.node) &&
            t.isImportDeclaration(importPath.parent) &&
            t.isIdentifier(importPath.node.imported) &&
            importPath.parent.source.value.startsWith('react')) {
            return importPath.node.imported.name === 'Fragment';
        }
        return false;
    }
    /**
     * case:
     * import * as React from 'react';
     * <React.Fragment></React.Fragment>
     */
    if (t.isJSXMemberExpression(node.openingElement.name)) {
        const object = node.openingElement.name.object;
        const property = node.openingElement.name.property;
        if (!t.isJSXIdentifier(object)) {
            return false;
        }
        return object.name.toLowerCase() === 'react' && property.name === 'Fragment';
    }
    return false;
}
exports.isReactFragment = isReactFragment;
/**
 * 通过名称查找属性
 *
 * @export
 * @param {string} name
 * @param {t.JSXOpeningElement['attributes']} attributes
 * @returns
 */
function getAttributeByName(name, attributes) {
    return attributes.find(attr => t.isJSXAttribute(attr) && attr.name.name === name);
}
exports.getAttributeByName = getAttributeByName;
/**
 * 从 attributes 中获取 leaf 属性
 *
 * @export
 * @param {t.JSXOpeningElement} element
 * @returns
 */
function getLeafAttribute(element) {
    const attribute = getAttributeByName(constants_1.LEAF, element.attributes);
    return attribute;
}
exports.getLeafAttribute = getLeafAttribute;
/**
 * 从 attributes 中获取 template id
 *
 * @export
 * @param {t.JSXOpeningElement} element
 * @returns
 */
function getTemplateID(element) {
    var _a;
    const attribute = getAttributeByName(constants_1.TEMPLATE_ID, element.attributes);
    return (_a = attribute === null || attribute === void 0 ? void 0 : attribute.value) === null || _a === void 0 ? void 0 : _a.value;
}
exports.getTemplateID = getTemplateID;
/**
 * 判断是否是 Leaf 节点
 * 组件标记了 leaf 属性时，说明其子节点是单节点
 * 目前只有 plain text 文本情况
 */
function isPlainTextLeaf(node, path, options) {
    if (!t.isJSXElement(node)) {
        return false;
    }
    if (!isHostComponentElement(node, path, options)) {
        return false;
    }
    return getLeafAttribute(node.openingElement);
}
exports.isPlainTextLeaf = isPlainTextLeaf;
/**
 * 用标签包裹当前 node
 */
function wrappedByElement(name, node, path) {
    path.replaceWith(t.jsxElement(t.jsxOpeningElement(t.jsxIdentifier(name), []), t.jsxClosingElement(t.jsxIdentifier(name)), [node], false));
}
exports.wrappedByElement = wrappedByElement;
/**
 * 用 <block> 标签包裹，用于处理无法静态化的标签和表达式
 *
 */
function wrappedByExpressionBlock(node, path) {
    // 如果不是在一个 JSXElement|JSXFragment 中，则不处理
    // 如：这是一个属性表达式 attr={xxx}
    if (!t.isJSXElement(path.parentPath.node) && !t.isJSXFragment(path.parentPath.node)) {
        return;
    }
    // 已经被 <block> 包裹
    if (isExpressionBlock(path.parentPath)) {
        return;
    }
    wrappedByElement(constants_1.EXPRESSION_BLOCK, node, path);
}
exports.wrappedByExpressionBlock = wrappedByExpressionBlock;
/**
 * 将标签替换成 JSXFragment
 */
function replacedWithJSXFragment(node, path) {
    path.replaceWith(t.jsxFragment(t.jsxOpeningFragment(), t.jsxClosingFragment(), node.children));
}
exports.replacedWithJSXFragment = replacedWithJSXFragment;
/**
 * 判断是否是空的 JSXText
 * 空的含义是，只包含空格，换行符，空字符串的 JSXText
 *
 * @export
 * @param node
 * @returns
 */
function isEmptyText(node) {
    if (!t.isJSXText(node)) {
        return false;
    }
    // 过滤掉空格，换行符后，是否还为空
    return !cleanJSXElementLiteralChild_1.default(node);
}
exports.isEmptyText = isEmptyText;
/**
 * 格式化 literal
 * 由于在 JSX 中，任何换行都会被处理成 JSXText 的内容，因此需要对 JSXText 的内容做格式化
 * 如：
 * <Text>
 *  text1
 *  text2
 * </Text>
 * 在上例中，
 * case A: 由开标签 <Text> 到第二行的 'text1' 前的这部分换行+空格组成的字符串需要剔除
 * case B: 由第二行 'text1' 结尾到第三行的 'text2'前的这部分换行+空格组成的字符串需要处理成一个空格 ' '
 * case C: 由第三行 'text2' 结尾到第四行的闭标签 </Text>前的这部分换行+空格组成的字符串需要剔除
 *
 * @export
 * @param {string} literal
 * @returns
 */
function normalizeLiteral(literal) {
    let value = literal.toString();
    // case A
    if (value.startsWith('\n')) {
        value = value.trimLeft();
    }
    // case B
    if (value.trim().indexOf('\n') !== -1) {
        value = value.replace(/\n\s+/g, ' ');
    }
    // case C
    if (value.indexOf('\n') !== -1) {
        value = value.trimRight();
    }
    return value;
}
exports.normalizeLiteral = normalizeLiteral;
/**
 * 判断一个元素上是否有 ...props
 *
 * @param node
 */
function hasSpreadAttribute(node) {
    return node.openingElement.attributes.some(attr => t.isJSXSpreadAttribute(attr));
}
exports.hasSpreadAttribute = hasSpreadAttribute;
/**
 * 判断一个元素属性里是不是有 children
 */
function hasChildrenAttribute(node) {
    return node.openingElement.attributes.some(attr => t.isJSXAttribute(attr) && attr.name.name === 'children');
}
exports.hasChildrenAttribute = hasChildrenAttribute;
