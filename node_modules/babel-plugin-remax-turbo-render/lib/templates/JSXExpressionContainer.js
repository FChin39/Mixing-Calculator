"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const t = __importStar(require("@babel/types"));
const helpers = __importStar(require("../helpers"));
const stringPath_1 = __importDefault(require("./stringPath"));
const constants_1 = require("../constants");
/**
 * 创建 JSXExpressionContainer 对应的模板
 *
 * @export
 * @param {t.JSXExpressionContainer} element
 * @param {(Array<string | number>)} dataPath
 * @returns
 */
function JSXExpressionContainer(element, dataPath) {
    const expressionContainer = element;
    // case: Literal
    // 直接静态化
    if (t.isLiteral(expressionContainer.expression)) {
        return `{{'${helpers.normalizeLiteral(expressionContainer.expression.value)}'}}`;
    }
    // TODO: 更多 case 可以在这里处理, 如：
    // {array.map(...)} 可以定向处理
    // ... 其他情况
    // case: 默认
    // 遍历其中的节点，动态生成
    const nodePath = stringPath_1.default(dataPath);
    return `<block a:if="{{${nodePath}.children}}">
  <block a:for="{{${nodePath}.children || []}}" key="{{item.id}}">
    <template a:if="{{item.props.${constants_1.TEMPLATE_ID}}}" is="{{'TPL_' + item.props.${constants_1.TEMPLATE_ID}}}" data="{{ node: item }}" />
    <template a:else is="{{ 'TPL_' + item.type }}" data="{{ node: item }}" />
  </block>
</block>
<template a:elif="{{${nodePath}.props.${constants_1.TEMPLATE_ID}}}" is="{{'TPL_' + ${nodePath}.props.${constants_1.TEMPLATE_ID}}}" data="{{ node: ${nodePath} }}" />
<template a:else is="{{ 'TPL_' + ${nodePath}.type }}" data="{{ node: ${nodePath} }}" />
`;
}
exports.default = JSXExpressionContainer;
