"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAttributesTemplate = void 0;
const t = __importStar(require("@babel/types"));
const build_store_1 = __importDefault(require("@remax/build-store"));
const constants_1 = require("../constants");
/**
 * 生成属性值模板
 *
 * @param {string} attributeName
 * @param {string} dataPath
 * @param {(t.StringLiteral | t.JSXExpressionContainer)} [value]
 * @returns
 */
function createAttributeValueTemplate(attributeName, dataPath, value) {
    let template = '';
    // case: Literal
    // 直接静态化
    if (t.isLiteral(value)) {
        template = value.value;
    }
    // case: JSXExpressionContainer
    if (t.isJSXExpressionContainer(value)) {
        // 同 Literal 处理
        if (t.isLiteral(value.expression)) {
            template = value.expression.value;
        }
        else {
            // TODO: 更多情况处理
            // 1. 属性是方法，可以直接用对应方法名做属性值
            // ...其他情况
            template = `{{${dataPath}.props['${attributeName}']}}`;
        }
    }
    // 附加的一些默认属性，没有 value
    if (value === null || value === undefined) {
        template = `{{${dataPath}.props['${attributeName}']}}`;
    }
    return `"${template}"`;
}
/**
 * 生成模板中的属性片段
 *
 * @export
 * @param {string} componentType
 * @param {string} dataPath
 * @param {(Array<t.JSXAttribute | t.JSXSpreadAttribute>)} attributes
 * @returns
 */
function createAttributesTemplate(componentType, dataPath, attributes) {
    const SEPARATOR = '\n  ';
    const hostComponent = build_store_1.default.registeredHostComponents.get(componentType);
    // case: Spread Attributes
    // 包含了 Spread Attributes 就返回所有属性
    const template = attributes
        // template id 不渲染
        // react "key" 属性 不渲染
        // leaf 属性 不渲染
        // entry 属性 不渲染
        .filter(attr => ![constants_1.TEMPLATE_ID, constants_1.REACT_KEY, constants_1.LEAF, constants_1.ENTRY].find(k => k === attr.name.name))
        .map(attr => {
        var _a, _b;
        const name = attr.name;
        let attrName = '';
        if (t.isJSXIdentifier(name)) {
            attrName = name.name;
        }
        if (t.isJSXNamespacedName(name)) {
            attrName = name.namespace.name + ':' + name.name.name;
        }
        const prop = (_b = (_a = hostComponent === null || hostComponent === void 0 ? void 0 : hostComponent.alias) === null || _a === void 0 ? void 0 : _a[attrName]) !== null && _b !== void 0 ? _b : attrName;
        return [prop, createAttributeValueTemplate(prop, dataPath, attr.value)];
    });
    return template.map(([prop, value]) => `${prop}=${value}`).join(SEPARATOR);
}
exports.createAttributesTemplate = createAttributesTemplate;
