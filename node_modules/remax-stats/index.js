const debug = require('debug')('remax-stats')
const https = require('https');
const fs = require('fs');
const path = require('path');
const execSync = require('child_process').execSync;
const isGitRepo = require('is-git-repository');
const GitUrlParse = require("git-url-parse");

function run(params = {}) {
  try {
    const req = https
      .get(
        'https://cdog01.alibaba-inc.com/aliwork/tfscom/TB19ARumfb2gK0jSZK9XXaEgFXa.tfsprivate_140x140',
        function(res) {
          if (res.statusCode === 200) {
            debug('发现内网环境');
            try {
              const packageJSON = getPackageJSON();
              const userInfo = getGitUerInfo();
              debug('最近一次提交 %o', userInfo);
              const repo = exec('git config --get remote.origin.url');
              if (!repo || repo.includes('github.com')) {
                debug('非内网项目或未设置远程仓库');
                return;
              }
              debug('仓库地址 %s', repo);
              const repoUrl = GitUrlParse.stringify(GitUrlParse(repo), 'http');
              const postReq = https
                .request('https://remaxstats-office.alipay.net/api/stats', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                })
                .on('error', function() {
                  debug('上报失败');
                });

              postReq.setTimeout(500, function() {
                debug('上报超时');
                postReq.abort();
              });

              const data = Object.assign({}, {
                package: packageJSON,
                repo: repoUrl,
                name: userInfo.name,
                email: userInfo.email,
              }, params)

              debug('上报数据 %j', data);

              postReq.write(
                JSON.stringify(data),
              );

              postReq.end();
            } catch (e) {
              // ignore
              debug('收集信息异常');
            }
          } else {
            debug('非内网环境请求失败');
          }
        },
      )
      .on('error', function() {
        debug('非内网环境请求异常');
      });

    req.setTimeout(500, function() {
      debug('非内网环境请求超时');
      req.abort();
    });

    req.end();
  } catch (e) {
    debug('非内网环境请求失败');
    // ignore
  }

  function getGitConfig() {
    const name = exec('git config --get user.name');
    const email = exec('git config --get user.email');
    return { name, email };
  }

  function getGitUerInfo(skip = 0) {
    let name = '';
    let email = '';
    if (isGitRepo()) {
      name = exec('git --no-pager log --pretty=format:"%an" -n1' + ' --skip=' + skip);
      email = exec('git --no-pager log --pretty=format:"%ae" -n1' + ' --skip=' + skip);
      if (name && name !== 'myscm' && name !== 'ant-ued' && name !== '伙伴 Gitlab') {
        return { name, email };
      } else if (!name) {
        return getGitConfig();
      } else {
        skip += 1;
        return getGitUerInfo(skip);
      }
    } else {
      return getGitConfig();
    }
  }

  function getPackageJSON() {
    try {
      const pkgFile = path.join(process.cwd(), 'package.json');
      return JSON.parse(fs.readFileSync(pkgFile).toString());
    } catch (e) {
      return {};
    }
  }

  function exec(cmd) {
    try {
      return execSync(cmd, {
        stdio: ['pipe', 'pipe', 'ignore'],
      })
        .toString()
        .trim();
    } catch (e) {
      return '';
    }
  }
}

module.exports.run = run;
