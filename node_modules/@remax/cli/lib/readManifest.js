"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
function readTypescriptManifest(path, target) {
    require('@babel/register')({
        presets: [
            [require.resolve('@babel/preset-env'), { modules: 'commonjs' }],
            require.resolve('@babel/preset-typescript'),
        ],
        extensions: ['.ts'],
        cache: false,
    });
    delete require.cache[path];
    const config = require(path)[target] || require(path).default || require(path);
    return config;
}
function readJavascriptManifest(path, target) {
    delete require.cache[path];
    const config = require(path)[target] || require(path).default || require(path);
    return config;
}
function readManifest(filename, target, strict = false) {
    if (!fs.existsSync(filename)) {
        if (strict) {
            throw new Error(`${path_1.default}.ts|js 文件不存在，请先创建配置文件，参考 https://remaxjs.org/guide/config/remax`);
        }
        return {};
    }
    if (path_1.default.extname(filename) === '.ts') {
        return readTypescriptManifest(filename, target);
    }
    else {
        return readJavascriptManifest(filename, target);
    }
}
exports.default = readManifest;
