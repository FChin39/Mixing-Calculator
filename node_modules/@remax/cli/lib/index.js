"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const build_1 = require("./build");
const getConfig_1 = __importDefault(require("./getConfig"));
const API_1 = __importDefault(require("./API"));
__exportStar(require("./legacyExport"), exports);
class RemaxCLI {
    run(args, callback) {
        var _a;
        const argv = require('yargs-parser')(args);
        process.env.REMAX_PLATFORM = argv.t || argv.target || 'ali';
        this.options = getConfig_1.default();
        this.options.compressTemplate = (_a = this.options.compressTemplate) !== null && _a !== void 0 ? _a : argv.minimize;
        this.api = new API_1.default();
        const cli = this.initCLI();
        this.api.registerPlugins(this.options.plugins);
        this.api.extendCLI(cli);
        if (args.length === 0) {
            cli.showHelp();
        }
        return cli.parse(args, callback);
    }
    initCLI() {
        return yargs_1.default
            .scriptName('remax')
            .usage('Usage: $0 <command> [options]')
            .command('build', '编译项目', y => {
            y.option('watch', {
                describe: '监听文件变化',
                alias: 'w',
                type: 'boolean',
                default: false,
            })
                .option('target', {
                describe: '目标平台',
                alias: 't',
                type: 'string',
                default: 'ali',
            })
                .option('notify', {
                describe: '编译错误提醒',
                alias: 'n',
                type: 'boolean',
                default: false,
            })
                .option('port', {
                describe: '指定端口号',
                alias: 'p',
                type: 'number',
            })
                .option('minimize', {
                describe: '最小化文件',
                alias: 'm',
                type: 'boolean',
                default: false,
            })
                .option('analyze', {
                describe: '编译分析',
                alias: 'a',
                type: 'boolean',
                default: false,
            })
                .option('devtools', {
                describe: '启动 react-devtools 调试',
                alias: 'd',
                type: 'boolean',
                default: true,
            })
                .option('loglevel', {
                describe: '展示日志级别',
                type: 'string',
                default: 'verbose',
            });
        }, (argv) => {
            build_1.internalBuildApp(Object.assign(Object.assign({}, this.options), argv), this.api);
            try {
                require('remax-stats').run({ type: 'remax' });
            }
            catch (e) {
                // ignore
            }
        })
            .command('mini-plugin', '插件相关命令', y => {
            y.command('build', '编译插件', y => {
                y.option('watch', {
                    describe: '监听文件变化',
                    alias: 'w',
                    type: 'boolean',
                    default: false,
                }).option('target', {
                    describe: '目标平台',
                    alias: 't',
                    type: 'string',
                });
            }, (argv) => {
                build_1.buildMiniPlugin(Object.assign(Object.assign({}, this.options), argv));
                try {
                    require('remax-stats').run({ type: 'remax' });
                }
                catch (e) {
                    // ignore
                }
            });
        })
            .help();
    }
}
exports.default = RemaxCLI;
