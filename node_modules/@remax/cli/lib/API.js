"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shared_1 = require("@remax/shared");
const lodash_1 = require("lodash");
const build_store_1 = __importDefault(require("@remax/build-store"));
const builtinPlugins_1 = require("./builtinPlugins");
class API {
    constructor() {
        this.plugins = [];
        this.adapter = {
            name: '',
            target: '',
            packageName: '',
            options: {},
        };
        this.meta = {
            global: '',
            template: {
                extension: '',
                tag: '',
                src: '',
            },
            style: '',
            jsHelper: {
                extension: '',
                tag: '',
                src: '',
            },
            include: {
                tag: '',
                src: '',
            },
        };
    }
    getMeta() {
        let meta = {
            global: '',
            template: {
                extension: '',
                tag: '',
                src: '',
            },
            style: '',
            jsHelper: {
                extension: '',
                tag: '',
                src: '',
            },
            ejs: {
                page: '',
            },
        };
        this.plugins.forEach(plugin => {
            meta = lodash_1.merge(meta, plugin.meta || {});
        });
        return meta;
    }
    processProps(componentName, props, additional, node) {
        let nextProps = props;
        this.plugins.forEach(plugin => {
            if (typeof plugin.processProps === 'function') {
                nextProps = plugin.processProps({
                    componentName,
                    props: nextProps,
                    additional,
                    node,
                });
            }
        });
        return nextProps;
    }
    onBuildStart(config) {
        this.plugins.forEach(plugin => {
            if (typeof plugin.onBuildStart === 'function') {
                plugin.onBuildStart({ config });
            }
        });
    }
    onAppConfig(config) {
        return this.plugins.reduce((acc, plugin) => {
            if (typeof plugin.onAppConfig === 'function') {
                acc = plugin.onAppConfig({ config: acc });
            }
            return acc;
        }, config);
    }
    onPageConfig({ page, config }) {
        return this.plugins.reduce((acc, plugin) => {
            if (typeof plugin.onPageConfig === 'function') {
                acc = plugin.onPageConfig({ page, config: acc });
            }
            return acc;
        }, config);
    }
    configWebpack(params) {
        this.plugins.forEach(plugin => {
            if (typeof plugin.configWebpack === 'function') {
                plugin.configWebpack(params);
            }
        });
    }
    configBabel(params) {
        this.plugins.forEach(plugin => {
            if (typeof plugin.configBabel === 'function') {
                plugin.configBabel(params);
            }
        });
    }
    extendCLI(cli) {
        this.plugins.forEach(plugin => {
            if (typeof plugin.extendCLI === 'function') {
                plugin.extendCLI({ cli });
            }
        });
    }
    onPageTemplate({ template, page }) {
        return this.plugins.reduce((acc, plugin) => {
            if (typeof plugin.onPageTemplate === 'function') {
                acc = plugin.onPageTemplate({ template, page });
            }
            return acc;
        }, template);
    }
    getRuntimePluginFiles() {
        return this.plugins
            .map(plugin => {
            if (typeof plugin.registerRuntimePlugin === 'function') {
                return shared_1.slash(plugin.registerRuntimePlugin());
            }
        })
            .filter(Boolean);
    }
    loadBuiltinPlugins(options) {
        const plugins = builtinPlugins_1.builtinPlugins(options).reduce((acc, plugin) => {
            acc.push(plugin.init({}, options));
            return acc;
        }, []);
        this.registerPlugins(plugins);
    }
    registerAdapterPlugins(targetName) {
        this.adapter.target = targetName;
        this.adapter.packageName = '@remax/' + targetName;
        const packagePath = this.adapter.packageName + '/node';
        let plugin = require(packagePath).default || require(packagePath);
        plugin = typeof plugin === 'function' ? plugin() : plugin;
        build_store_1.default.skipHostComponents = plugin.skipHostComponents;
        this.registerHostComponents(plugin.hostComponents);
        this.plugins.push(plugin);
    }
    registerPlugins(plugins) {
        plugins === null || plugins === void 0 ? void 0 : plugins.forEach(plugin => {
            if (plugin) {
                this.registerHostComponents(plugin.hostComponents);
                this.plugins.push(plugin);
            }
        });
    }
    registerHostComponents(components) {
        if (!components) {
            return;
        }
        for (const key of components.keys()) {
            build_store_1.default.registeredHostComponents.set(key, components.get(key));
        }
    }
}
exports.default = API;
