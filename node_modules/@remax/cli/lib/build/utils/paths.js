"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNativeAssetOutputPath = exports.replaceExtension = void 0;
const path = __importStar(require("path"));
const shared_1 = require("@remax/shared");
const crypto_1 = __importDefault(require("crypto"));
const hash = (name) => crypto_1.default.createHash('md5').update(name).digest('hex');
function replaceExtension(file, ext) {
    const oldExt = path.extname(file);
    return file.replace(new RegExp(`${oldExt}$`), ext);
}
exports.replaceExtension = replaceExtension;
function getNativeAssetOutputPath(sourcePath, options) {
    let output = shared_1.slash(sourcePath)
        .replace(shared_1.slash(options.cwd) + '/', '')
        .replace(shared_1.slash(options.rootDir) + '/', '')
        .replace(/@/g, '_')
        .replace(/node_modules/g, 'npm');
    if (path.isAbsolute(output)) {
        // 通过 config.resolve.modules 设置非 cwd 的 sourcePath, 会进入此分支
        // 将这种路径改成相对路径
        const dirname = path.dirname(output);
        const basename = path.basename(output);
        output = '_external/' + hash(dirname) + basename;
    }
    return output;
}
exports.getNativeAssetOutputPath = getNativeAssetOutputPath;
