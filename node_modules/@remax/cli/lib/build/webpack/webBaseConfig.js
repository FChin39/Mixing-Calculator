"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack = __importStar(require("webpack"));
const extensions_1 = require("../../extensions");
const css_1 = require("./config/css");
const fs_1 = __importDefault(require("fs"));
const copy_webpack_plugin_1 = __importDefault(require("copy-webpack-plugin"));
const webpackbar_1 = __importDefault(require("webpackbar"));
const webpack_bundle_analyzer_1 = require("webpack-bundle-analyzer");
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
function webBaseConfig(config, builder) {
    var _a, _b;
    config.devtool(process.env.NODE_ENV === 'development' ? 'cheap-module-source-map' : false);
    config.resolve.extensions.merge(extensions_1.targetExtensions(builder.target));
    config.output.filename(process.env.NODE_ENV === 'production' ? '[name].[chunkhash:8].js' : '[name].js');
    config.optimization.runtimeChunk({
        name: 'runtime',
    });
    config.module
        .rule('js')
        .test(extensions_1.moduleMatcher)
        .exclude.add(/\.ejs/)
        .end()
        .use('babel')
        .loader('babel')
        .options({
        reactPreset: true,
        api: builder.api,
        compact: process.env.NODE_ENV === 'production',
    });
    if ((_b = (_a = builder.options) === null || _a === void 0 ? void 0 : _a.web) === null || _b === void 0 ? void 0 : _b.excludeNodeModulesTransform) {
        config.module.rule('js').exclude.add(/(node_modules)/);
    }
    css_1.cssConfig(config, builder, true);
    config.module
        .rule('image')
        .test(/\.(png|jpe?g|gif|svg)$/i)
        .use('file')
        .loader(require.resolve('file-loader'));
    config.module
        .rule('font')
        .test(/\.(ttf|eot|woff|woff2)$/i)
        .use('file')
        .loader(require.resolve('file-loader'));
    if (fs_1.default.existsSync(builder.projectPath.publicDir())) {
        config
            .plugin('webpack-copy-plugin')
            .use(copy_webpack_plugin_1.default, [[{ from: builder.projectPath.publicDir(), to: builder.projectPath.outputDir() }]]);
    }
    config.plugin('webpackbar').use(webpackbar_1.default, [{ name: 'web' }]);
    if (builder.options.analyze) {
        config.plugin('webpack-bundle-analyzer').use(webpack_bundle_analyzer_1.BundleAnalyzerPlugin);
    }
    if (!builder.options.watch) {
        config.plugin('mini-css-extract-plugin').use(mini_css_extract_plugin_1.default, [
            {
                filename: process.env.NODE_ENV === 'production' ? '[name].[chunkhash:8].css' : '[name].css',
            },
        ]);
    }
    const context = {
        config,
        webpack,
        addCSSRule: (ruleConfig) => {
            css_1.addCSSRule(config, builder, true, ruleConfig);
        },
    };
    if (typeof builder.options.configWebpack === 'function') {
        builder.options.configWebpack(context);
    }
    builder.api.configWebpack(context);
    return config;
}
exports.default = webBaseConfig;
