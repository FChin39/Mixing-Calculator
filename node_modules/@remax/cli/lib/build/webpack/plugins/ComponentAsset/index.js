"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const SourceCache_1 = __importDefault(require("../../../../SourceCache"));
const createManifest_1 = __importDefault(require("./createManifest"));
const createTemplate_1 = __importDefault(require("./createTemplate"));
const modules_1 = __importDefault(require("../../../utils/modules"));
const createTurboTemplate_1 = __importDefault(require("../PageAsset/createTurboTemplate"));
const ComponentEntry_1 = __importDefault(require("../../../entries/ComponentEntry"));
const PLUGIN_NAME = 'RemaxComponentAssetPlugin';
class ComponentAssetPlugin {
    constructor(builder) {
        this.cache = new SourceCache_1.default();
        this.builder = builder;
    }
    apply(compiler) {
        compiler.hooks.emit.tapAsync(PLUGIN_NAME, async (compilation, callback) => {
            const { options, api } = this.builder;
            const meta = api.getMeta();
            const { entries } = this.builder.entryCollection;
            await Promise.all(Array.from(entries.values()).map(async (component) => {
                if (!(component instanceof ComponentEntry_1.default)) {
                    return Promise.resolve();
                }
                const chunk = compilation.chunks.find(c => {
                    return c.name === component.name;
                });
                const modules = [...modules_1.default(chunk), component.filename];
                let templatePromise;
                if (options.turboRenders) {
                    // turbo page
                    templatePromise = createTurboTemplate_1.default(this.builder.api, options, component, modules, meta, compilation);
                }
                else {
                    templatePromise = createTemplate_1.default(component, options, meta, compilation, this.cache);
                }
                await Promise.all([
                    await templatePromise,
                    await createManifest_1.default(this.builder, component, compilation, this.cache),
                ]);
            }));
            callback();
        });
    }
}
exports.default = ComponentAssetPlugin;
