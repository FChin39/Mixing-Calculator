"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUsingComponents = void 0;
const path = __importStar(require("path"));
const build_store_1 = __importDefault(require("@remax/build-store"));
const paths_1 = require("../../utils/paths");
const shared_1 = require("@remax/shared");
function findModule(compilation, file) {
    return Array.from(compilation._modules.values()).find((m) => shared_1.slash(m.resource) === file);
}
function compositionComponents(compilation) {
    const compositionComponents = new Map();
    build_store_1.default.compositionComponents.forEach((components, file) => {
        const module = findModule(compilation, file);
        module === null || module === void 0 ? void 0 : module.dependencies.forEach((dep) => {
            const component = components.get(dep.request);
            if (component && dep.module) {
                const resource = shared_1.slash(dep.module.resource);
                const compositionComponent = compositionComponents.get(resource) || new Set();
                component.props.forEach(compositionComponent.add, compositionComponent);
                compositionComponents.set(resource, compositionComponent);
            }
        });
    });
    return compositionComponents;
}
/**
 * 编译小程序自定义组件流程
 *
 * 1. 通过 @babel/plugin-remax-host-component 找出每个 module 中从外部 import 的 composition component，放入 Store.compositionComponents；
 * 2. 通过 webpack loader 找出所有小程序自定义组件，放入 Store.nativeComponent；
 * 3. 在 getUsingComponents 方法中通过 compilation.modules 递归遍历所有 page 的 dependencies；
 * 4. 通过 1、2 中的信息从 dependencies 中找出 page 依赖的小程序自定义组件。
 */
function getUsingComponents(page, compilation, options, prefixPath = '') {
    const components = new Map();
    const handledModules = new Set();
    const getComponents = (module) => {
        if (!module) {
            return;
        }
        const resource = shared_1.slash(module.resource);
        // 防止循环依赖
        if (resource) {
            if (handledModules.has(resource)) {
                return;
            }
            handledModules.add(resource);
        }
        const pluginComponents = Array.from(build_store_1.default.pluginComponents.values()).filter(c => c.importers.has(resource));
        pluginComponents.forEach(pluginComponent => {
            components.set(pluginComponent.id, {
                id: pluginComponent.id,
                path: pluginComponent.componentPath,
                props: Array.from(pluginComponent.props.values()),
            });
        });
        module.dependencies.forEach((dep) => {
            if (dep.module) {
                let depModule;
                if (dep.module.resource) {
                    depModule = dep.module;
                }
                else if (dep.module.rootModule) {
                    depModule = dep.module.rootModule;
                }
                else {
                    return;
                }
                const depResource = shared_1.slash(depModule.resource);
                const nativeComponent = build_store_1.default.nativeComponents.get(depResource);
                if (nativeComponent) {
                    const componentProps = compositionComponents(compilation).get(depResource);
                    const componentPath = shared_1.slash(path.join(prefixPath, paths_1.getNativeAssetOutputPath(depResource, options)));
                    components.set(nativeComponent.id, {
                        id: nativeComponent.id,
                        path: componentPath.replace(new RegExp(`\\${path.extname(componentPath)}$`), ''),
                        props: Array.from(componentProps ? componentProps.values() : []),
                    });
                }
                getComponents(depModule);
            }
        });
    };
    getComponents(findModule(compilation, page));
    return components;
}
exports.getUsingComponents = getUsingComponents;
