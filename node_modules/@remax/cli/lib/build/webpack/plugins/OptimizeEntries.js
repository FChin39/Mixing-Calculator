"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const webpack_sources_1 = require("webpack-sources");
const shared_1 = require("@remax/shared");
const PLUGIN_NAME = 'RemaxOptimizeEntriesPlugin';
class OptimizeEntriesPlugin {
    constructor(meta) {
        this.meta = meta;
    }
    apply(compiler) {
        compiler.hooks.thisCompilation.tap(PLUGIN_NAME, (compilation) => {
            compilation.hooks.optimizeChunkAssets.tapAsync(PLUGIN_NAME, (chunks, callback) => {
                this.requireChunks(compilation);
                this.requireStyles(compilation);
                callback();
            });
        });
    }
    requireChunks(compilation) {
        compilation.chunkGroups.forEach(group => {
            group.chunks.reverse().forEach((chunk) => {
                var _a;
                // require 相关的 chunk
                if (chunk.name !== group.name) {
                    const requires = [];
                    chunk.files.forEach((file) => {
                        if (file.endsWith('.js')) {
                            const relativePath = shared_1.slash(path.relative(path.dirname(group.name), file));
                            requires.push(`require('./${relativePath}');\n`);
                        }
                    });
                    const chunkPath = group.name + '.js';
                    compilation.assets[chunkPath] = new webpack_sources_1.ConcatSource(...requires, (_a = compilation.assets[chunkPath]) !== null && _a !== void 0 ? _a : '');
                }
            });
        });
    }
    requireStyles(compilation) {
        compilation.chunkGroups.forEach(group => {
            const assetPath = group.name + this.meta.style;
            group.chunks.reverse().forEach((chunk) => {
                var _a;
                // require 相关的 styles
                const requires = chunk.files
                    .filter(file => file.endsWith(this.meta.style) && assetPath !== file)
                    .map(file => {
                    const relativePath = shared_1.slash(path.relative(path.dirname(group.name), file));
                    const requirePath = `@import "./${relativePath}";\n`;
                    return requirePath;
                });
                compilation.assets[assetPath] = new webpack_sources_1.ConcatSource(...requires, (_a = compilation.assets[assetPath]) !== null && _a !== void 0 ? _a : '');
            });
        });
    }
}
exports.default = OptimizeEntriesPlugin;
