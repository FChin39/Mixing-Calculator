"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBaseTemplate = exports.createRenderOptions = void 0;
const lodash_1 = require("lodash");
const ejs_1 = __importDefault(require("ejs"));
const build_store_1 = __importDefault(require("@remax/build-store"));
const getUsingComponents_1 = require("../getUsingComponents");
const shared_1 = require("@remax/shared");
const PageEntry_1 = __importDefault(require("../../../entries/PageEntry"));
const UNSAFE_wechatTemplateDepth_1 = require("../../../../defaultOptions/UNSAFE_wechatTemplateDepth");
function createRenderOptions(page, compilation, options, filter = true) {
    const components = new Map(build_store_1.default.getCollectedComponents());
    if (filter) {
        getUsingComponents_1.getUsingComponents(page, compilation, options).forEach(component => {
            components.set(component.id, {
                id: component.id,
                props: component.props,
                type: 'native',
            });
        });
    }
    return {
        components,
        skipComponents: build_store_1.default.skipHostComponents,
        slotView: {
            props: [...new Set(build_store_1.default.slotView.props || [])].sort(),
        },
    };
}
exports.createRenderOptions = createRenderOptions;
async function createPageTemplate(api, options, page, meta, compilation, cache) {
    const fileName = shared_1.slash(`${page.name}${meta.template.extension}`);
    const ejsOptions = Object.assign(Object.assign({}, createRenderOptions(page.filename, compilation, options)), { baseTemplate: `/base${meta.template.extension}`, sortBy: lodash_1.sortBy });
    if (meta.jsHelper) {
        ejsOptions.jsHelper = `./${page.name}_helper${meta.jsHelper.extension}`;
    }
    let source = await ejs_1.default.renderFile(meta.ejs.page, ejsOptions, {
        rmWhitespace: options.compressTemplate,
    });
    source = api.onPageTemplate({ template: source, page: page.name });
    /* istanbul ignore next */
    if (options.compressTemplate) {
        source = source.replace(/^\s*$(?:\r\n?|\n)/gm, '').replace(/\r\n|\n/g, ' ');
    }
    cache.invalid(fileName, source, () => {
        compilation.assets[fileName] = {
            source: () => source,
            size: () => Buffer.byteLength(source),
        };
    });
}
exports.default = createPageTemplate;
async function createBaseTemplate(pages, options, meta, compilation, cache) {
    if (!meta.ejs.base) {
        return null;
    }
    const components = new Map(build_store_1.default.getCollectedComponents());
    pages.forEach(page => {
        if (page instanceof PageEntry_1.default) {
            getUsingComponents_1.getUsingComponents(page.filename, compilation, options).forEach(component => {
                components.set(component.id, {
                    id: component.id,
                    props: component.props,
                    type: 'native',
                });
            });
        }
    });
    const slotView = {
        props: [...new Set(build_store_1.default.slotView.props || [])].sort(),
    };
    let source = await ejs_1.default.renderFile(meta.ejs.base, {
        components,
        skipComponents: build_store_1.default.skipHostComponents,
        slotView,
        sortBy: lodash_1.sortBy,
        depth: UNSAFE_wechatTemplateDepth_1.ensureDepth(options.UNSAFE_wechatTemplateDepth),
    }, {
        rmWhitespace: options.compressTemplate,
    });
    /* istanbul ignore next */
    if (options.compressTemplate) {
        source = source.replace(/^\s*$(?:\r\n?|\n)/gm, '').replace(/\r\n|\n/g, ' ');
    }
    const fileName = `base${meta.template.extension}`;
    cache.invalid(fileName, source, () => {
        compilation.assets[fileName] = {
            source: () => source,
            size: () => Buffer.byteLength(source),
        };
    });
}
exports.createBaseTemplate = createBaseTemplate;
