"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const NativeEntry_1 = __importDefault(require("../../entries/NativeEntry"));
const PLUGIN_NAME = 'NativeAssetPlugin';
class NativeAssetPlugin {
    constructor(builder) {
        this.builder = builder;
    }
    apply(compiler) {
        compiler.hooks.make.tapAsync(PLUGIN_NAME, async (compilation, callback) => {
            await Promise.all(Array.from(this.builder.entryCollection.nativeComponentEntries.values()).map(entry => {
                entry.updateSource();
                return entry.addToWebpack(compiler, compilation);
            }));
            callback();
        });
        compiler.hooks.watchRun.tap(PLUGIN_NAME, () => {
            this.builder.entryCollection.entries.forEach(entry => {
                if (entry instanceof NativeEntry_1.default) {
                    entry.updateSource();
                }
            });
        });
        compiler.hooks.emit.tapAsync(PLUGIN_NAME, async (compilation, callback) => {
            this.builder.entryCollection.entries.forEach(entry => {
                if (entry instanceof NativeEntry_1.default) {
                    this.createAssets(compilation, entry);
                }
            });
            this.builder.entryCollection.nativeComponentEntries.forEach(entry => {
                this.createAssets(compilation, entry);
            });
            const { appEntry } = this.builder.entryCollection;
            if (appEntry instanceof NativeEntry_1.default) {
                appEntry.getAssets().forEach(asset => {
                    compilation.assets[asset.output] = {
                        source: () => asset.content,
                        size: () => Buffer.byteLength(asset.content),
                    };
                });
            }
            callback();
        });
    }
    createAssets(compilation, entry) {
        const assets = entry.getAssets();
        assets.forEach(asset => {
            compilation.assets[asset.output] = {
                source: () => asset.content,
                size: () => Buffer.byteLength(asset.content),
            };
        });
        const manifestContent = Buffer.from(JSON.stringify(entry.getManifest(), null, 2));
        compilation.assets[entry.name + '.json'] = {
            source: () => manifestContent,
            size: () => Buffer.byteLength(manifestContent),
        };
    }
}
exports.default = NativeAssetPlugin;
