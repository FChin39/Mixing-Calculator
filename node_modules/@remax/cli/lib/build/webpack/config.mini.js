"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path = __importStar(require("path"));
const webpack = __importStar(require("webpack"));
const webpack_chain_1 = __importDefault(require("webpack-chain"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const copy_webpack_plugin_1 = __importDefault(require("copy-webpack-plugin"));
const webpack_virtual_modules_1 = __importDefault(require("webpack-virtual-modules"));
const webpack_bundle_analyzer_1 = require("webpack-bundle-analyzer");
const webpackbar_1 = __importDefault(require("webpackbar"));
const shared_1 = require("@remax/shared");
const ejs_1 = __importDefault(require("ejs"));
const extensions_1 = require("../../extensions");
const babel_plugin_remax_host_component_1 = __importDefault(require("babel-plugin-remax-host-component"));
const TurboRender = __importStar(require("babel-plugin-remax-turbo-render"));
const Lifecycle = __importStar(require("babel-plugin-remax-lifecycle"));
const babel_plugin_module_resolver_1 = __importDefault(require("babel-plugin-module-resolver"));
const babel_plugin_remax_regenerator_runtime_1 = __importDefault(require("babel-plugin-remax-regenerator-runtime"));
const build_store_1 = __importDefault(require("@remax/build-store"));
const RemaxPlugins = __importStar(require("./plugins"));
const css_1 = require("./config/css");
const baseConfig_1 = __importDefault(require("./baseConfig"));
const output_1 = __importDefault(require("../utils/output"));
function prepare(api) {
    const meta = api.getMeta();
    const publicPath = '/';
    return {
        meta,
        publicPath,
    };
}
function resolveBabelConfig(options) {
    if (fs_1.default.existsSync(path.join(options.cwd, 'babel.config.js'))) {
        return path.join(options.cwd, 'babel.config.js');
    }
    return false;
}
function webpackConfig(builder) {
    var _a;
    const config = new webpack_chain_1.default();
    baseConfig_1.default(config, builder);
    const { meta, publicPath } = prepare(builder.api);
    const appEntry = builder.entryCollection.appEntry;
    config.plugin('webpack-virtual-modules' + appEntry.name).use(appEntry.virtualModule);
    config.entry(appEntry.name).add(appEntry.virtualPath);
    builder.entryCollection.entries.forEach(e => {
        config.plugin('webpack-virtual-modules' + e.name).use(e.virtualModule);
        config.entry(e.name).add(e.virtualPath);
    });
    config.devtool(false);
    config.resolve.extensions.merge(extensions_1.targetExtensions(builder.target));
    config.output.filename('[name].js');
    config.output.globalObject(meta.global);
    config.output.publicPath(publicPath);
    config.optimization.runtimeChunk({ name: 'runtime' });
    config.optimization.splitChunks({
        cacheGroups: {
            remaxStyles: {
                name: 'remax-styles',
                test: new RegExp(`(.css|.less|.sass|.scss|.stylus|.styl|${builder.api.meta.style})$`),
                chunks: 'initial',
                minChunks: 2,
                minSize: 0,
            },
            remaxVendors: {
                name: 'remax-vendors',
                test: extensions_1.moduleMatcher,
                chunks: 'initial',
                minChunks: 2,
                minSize: 0,
                priority: 2,
            },
        },
    });
    config.optimization.minimize((_a = builder.options.minimize) !== null && _a !== void 0 ? _a : false);
    if (builder.options.turboRenders) {
        const options = {
            isHostComponentPackage: (pkg) => pkg.startsWith('remax'),
        };
        // turbo pages
        config.module
            .rule('turbo-page')
            .pre()
            .test(extensions_1.moduleMatcher)
            .exclude.add(/react-reconciler/)
            .end()
            .use('turbo-page-render')
            .loader('babel')
            .options({
            usePlugins: [TurboRender.extractTemplate(options)],
            reactPreset: false,
        })
            .end()
            .use('turbo-page-preprocess')
            .loader('babel')
            .options({
            usePlugins: [TurboRender.preprocess(options)],
            reactPreset: false,
        });
    }
    config.module
        .rule('js')
        .test(extensions_1.moduleMatcher)
        .exclude.add(/react-reconciler/)
        .end()
        .use('babel')
        .loader('babel')
        .options({
        babelrc: false,
        configFile: resolveBabelConfig(builder.options),
        usePlugins: [
            Lifecycle.app({
                test: file => appEntry.filename === shared_1.slash(file),
            }),
            Lifecycle.page({
                test: file => {
                    const importer = shared_1.slash(file);
                    const root = shared_1.slash(path.join(builder.options.cwd, builder.options.rootDir));
                    return importer.startsWith(root);
                },
            }),
            babel_plugin_remax_host_component_1.default({
                target: builder.options.target,
                hostComponents: build_store_1.default.registeredHostComponents,
                skipHostComponents: build_store_1.default.skipHostComponents,
                skipProps: [TurboRender.LEAF, TurboRender.ENTRY],
                includeProps: [TurboRender.TEMPLATE_ID],
            }),
            babel_plugin_remax_regenerator_runtime_1.default(),
            [
                babel_plugin_module_resolver_1.default,
                {
                    root: [`./${builder.options.rootDir}`],
                    alias: {
                        '/': './',
                    },
                },
            ],
        ],
        reactPreset: true,
        api: builder.api,
        compact: process.env.NODE_ENV === 'production',
    })
        .end()
        .use('native-component')
        .loader('nativeComponent')
        .options({
        builder,
    });
    css_1.cssConfig(config, builder, false);
    config.module
        .rule('image')
        .test(/\.(png|jpe?g|gif|svg)$/i)
        .use('file')
        .loader(require.resolve('file-loader'));
    config.module
        .rule('font')
        .test(/\.(ttf|eot|woff|woff2)$/i)
        .use('file')
        .loader(require.resolve('file-loader'));
    const runtimeOptionsTemplate = fs_1.default.readFileSync(path.resolve(__dirname, '../../../template/app-runtime-options.js.ejs'), 'utf-8');
    const runtimeOptionsPath = shared_1.slash('node_modules/@remax/apply-runtime-options.js');
    config.entry(appEntry.name).prepend('@remax/apply-runtime-options');
    const runtimeOptions = {
        pxToRpx: builder.options.pxToRpx,
        debug: !!process.env.REMAX_DEBUG || output_1.default.level === 'debug',
        platform: builder.options.target,
        pluginFiles: builder.api.getRuntimePluginFiles(),
        hostComponents: '[]',
        pageEvents: '{}',
        appEvents: '[]',
    };
    const virtualModules = new webpack_virtual_modules_1.default({
        [runtimeOptionsPath]: ejs_1.default.render(runtimeOptionsTemplate, runtimeOptions, { debug: false }),
    });
    config.plugin('webpack-virtual-modules').use(virtualModules);
    if (fs_1.default.existsSync(builder.projectPath.publicDir())) {
        config
            .plugin('webpack-copy-plugin')
            .use(copy_webpack_plugin_1.default, [[{ from: builder.projectPath.publicDir(), to: builder.projectPath.outputDir() }]]);
    }
    config.plugin('webpackbar').use(webpackbar_1.default);
    config.plugin('mini-css-extract-plugin').use(mini_css_extract_plugin_1.default, [{ filename: `[name]${meta.style}` }]);
    config.plugin('remax-optimize-entries-plugin').use(RemaxPlugins.OptimizeEntries, [meta]);
    config.plugin('remax-app-asset-plugin').use(RemaxPlugins.AppAsset, [builder]);
    config.plugin('remax-page-asset-plugin').use(RemaxPlugins.PageAsset, [builder]);
    config.plugin('remax-runtime-options-plugin').use(RemaxPlugins.RuntimeOptions, [builder]);
    config.plugin('remax-coverage-ignore-plugin').use(RemaxPlugins.CoverageIgnore);
    config.plugin('remax-native-asset-plugin').use(RemaxPlugins.NativeAsset, [builder]);
    if (builder.options.analyze) {
        config.plugin('webpack-bundle-analyzer').use(webpack_bundle_analyzer_1.BundleAnalyzerPlugin);
    }
    const context = {
        config,
        webpack,
        addCSSRule: (ruleConfig) => {
            css_1.addCSSRule(config, builder, false, ruleConfig);
        },
    };
    if (typeof builder.options.configWebpack === 'function') {
        builder.options.configWebpack(context);
    }
    builder.api.configWebpack(context);
    const externals = config.get('externals');
    const runtimeOptionsExternal = {
        '/__remax_runtime_options__': `require('/__remax_runtime_options__')`,
    };
    if (Array.isArray(externals)) {
        config.set('externals', [...externals, runtimeOptionsExternal]);
    }
    else {
        config.set('externals', Object.assign(Object.assign({}, externals), runtimeOptionsExternal));
    }
    return config.toConfig();
}
exports.default = webpackConfig;
