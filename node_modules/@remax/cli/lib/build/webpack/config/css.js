"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cssConfig = exports.addCSSRule = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const shared_1 = require("@remax/shared");
function resolvePostcssConfig(options) {
    if (fs.existsSync(path.join(options.cwd, 'postcss.config.js'))) {
        return options.cwd;
    }
    return shared_1.slash(path.resolve(__dirname, '../../../..'));
}
function addCSSRule(webpackConfig, builder, web, ruleConfig) {
    const { options } = builder;
    const rule = webpackConfig.module.rule(ruleConfig.name).test(ruleConfig.test);
    function applyLoaders(rule, cssModules) {
        if (options.watch && web) {
            rule.use('style-loader').loader(require.resolve('style-loader'));
        }
        else {
            rule.use('mini-css-extract-loader').loader(mini_css_extract_plugin_1.default.loader);
        }
        rule
            .use('css-loader')
            .loader(require.resolve('css-loader'))
            .options({
            importLoaders: ruleConfig.loader ? 2 : 1,
            modules: cssModules
                ? {
                    localIdentName: '[local]___[hash:base64:5]',
                }
                : false,
        });
        rule
            .use('postcss-loader')
            .loader(require.resolve('postcss-loader'))
            .options({
            config: {
                path: resolvePostcssConfig(options),
                ctx: {
                    plugins: {
                        [require.resolve('postcss-noop')]: {},
                        [require.resolve('postcss-preset-env')]: web && {
                            browsers: ['chrome >= 49', 'edge >= 13', 'ios >= 8', 'Android >= 4.4'],
                        },
                        [require.resolve('@remax/postcss-px2units')]: options.pxToRpx &&
                            (web
                                ? {
                                    targetUnits: 'rem',
                                    divisor: 100,
                                }
                                : {}),
                        [require.resolve('@remax/postcss-tag')]: web && {},
                    },
                },
            },
        });
        if (ruleConfig.loader) {
            rule.use(ruleConfig.loader).loader(require.resolve(ruleConfig.loader)).options(ruleConfig.options);
        }
    }
    applyLoaders(rule.oneOf('modules').resourceQuery(/modules/), true);
    applyLoaders(rule.oneOf('normal'), false);
}
exports.addCSSRule = addCSSRule;
function cssConfig(webpackConfig, builder, web) {
    addCSSRule(webpackConfig, builder, web, {
        name: 'css',
        test: /\.css(\?.*)?$/,
    });
    if (!web) {
        const { style } = builder.api.getMeta();
        webpackConfig.module
            .rule(style)
            .test(file => file.endsWith(style))
            .use('mini-css-extract-loader')
            .loader(mini_css_extract_plugin_1.default.loader)
            .end()
            .use('css-loader')
            .loader(require.resolve('css-loader'));
    }
}
exports.cssConfig = cssConfig;
