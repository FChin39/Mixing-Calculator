"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const webpack_1 = require("webpack");
const clean_webpack_plugin_1 = require("clean-webpack-plugin");
const alias_1 = __importDefault(require("../utils/alias"));
const env_1 = __importDefault(require("../utils/env"));
const webpack = __importStar(require("webpack"));
function baseConfig(config, builder) {
    config.resolveLoader.modules
        .merge(['node_modules', path.join(__dirname, './loaders')])
        .end()
        .extensions.merge(['.js', '.ts']);
    config.mode(process.env.NODE_ENV === 'production' ? 'production' : 'development');
    config.context(builder.options.cwd);
    config.resolve.alias.merge(alias_1.default(builder.options, builder.target));
    config.output.path(path.join(builder.options.cwd, builder.options.output));
    const env = env_1.default(builder.options, builder.target);
    config.plugin('webpack-define-plugin').use(webpack_1.DefinePlugin, [env.stringified]);
    config.plugin('provide-regeneratorRuntime').use(webpack.ProvidePlugin, [
        {
            regeneratorRuntime: 'regenerator-runtime',
        },
    ]);
    if (process.env.NODE_ENV === 'production') {
        config.plugin('clean-webpack-plugin').use(clean_webpack_plugin_1.CleanWebpackPlugin);
    }
    config.devServer
        .publicPath(config.get('publicPath'))
        .compress(true)
        .hot(true)
        .open(false)
        .historyApiFallback(true)
        .noInfo(true);
    return config;
}
exports.default = baseConfig;
