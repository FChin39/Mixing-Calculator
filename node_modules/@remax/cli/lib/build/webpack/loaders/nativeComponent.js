"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const loader_utils_1 = __importDefault(require("loader-utils"));
const build_store_1 = __importDefault(require("@remax/build-store"));
const shared_1 = require("@remax/shared");
const paths_1 = require("../../utils/paths");
const NativeEntry_1 = __importDefault(require("../../entries/NativeEntry"));
async function nativeModule(source) {
    this.cacheable();
    const callback = this.async();
    let finalSource = source;
    const { builder } = loader_utils_1.default.getOptions(this);
    const resourcePath = shared_1.slash(this.resourcePath);
    const entryRealPath = resourcePath.replace(/\.entry\.js$/, '.js');
    const entry = builder.entryCollection.entries.get(entryRealPath) ||
        builder.entryCollection.nativeComponentEntries.get(entryRealPath);
    if (entry instanceof NativeEntry_1.default && resourcePath != entryRealPath) {
        entry.watchAssets(this);
        await Promise.all(Array.from(entry.getDependentEntries().values()).map(component => {
            builder.entryCollection.nativeComponentEntries.set(component.filename, component);
            component.watchAssets(this);
            return component.addToWebpack(this._compiler, this._compilation);
        }));
    }
    if (resourcePath.endsWith('.entry.js')) {
        const cssFile = paths_1.replaceExtension(entryRealPath, builder.api.getMeta().style);
        if (fs.existsSync(cssFile)) {
            finalSource = `
        require('./${path.basename(cssFile)}');
        ${source}
      `;
        }
    }
    if (shared_1.isNativeComponent(resourcePath)) {
        const name = paths_1.getNativeAssetOutputPath(paths_1.replaceExtension(resourcePath, ''), builder.options);
        // loader 处理的文件顺序不固定，使用输出路径计算组件 id
        const id = build_store_1.default.registerNativeComponent(resourcePath, name);
        const entry = new NativeEntry_1.default(builder, name, resourcePath);
        builder.entryCollection.nativeComponentEntries.set(entry.filename, entry);
        entry.watchAssets(this);
        await entry.addToWebpack(this._compiler, this._compilation);
        finalSource = `import { createNativeComponent } from '@remax/runtime';
export default createNativeComponent('${id}')
`;
    }
    callback(null, finalSource);
}
exports.default = nativeModule;
