"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const babel_loader_1 = __importDefault(require("babel-loader"));
const lodash_1 = require("lodash");
const path_1 = __importDefault(require("path"));
function processPresets(presets, babel, react) {
    const remaxPresetIndex = presets.findIndex(preset => preset.file && preset.file.resolved.includes(`${path_1.default.sep}babel-preset-remax${path_1.default.sep}`));
    const defaultOptions = {
        react,
        targets: {},
    };
    const existOptions = remaxPresetIndex !== -1 ? presets[remaxPresetIndex].options : {};
    const remaxPreset = babel.createConfigItem([require.resolve('babel-preset-remax'), lodash_1.merge({}, defaultOptions, existOptions)], {
        type: `preset`,
    });
    if (remaxPresetIndex === -1) {
        presets.unshift(remaxPreset);
    }
    else {
        presets[remaxPresetIndex] = remaxPreset;
    }
    return presets;
}
exports.default = babel_loader_1.default.custom((babelCore) => ({
    customOptions(_a) {
        var { reactPreset, usePlugins, api } = _a, loaderOptions = __rest(_a, ["reactPreset", "usePlugins", "api"]);
        return {
            custom: {
                reactPreset,
                usePlugins,
                api,
            },
            loader: loaderOptions,
        };
    },
    config(cfg, { customOptions }) {
        const { reactPreset, api, usePlugins } = customOptions;
        const presets = processPresets(cfg.options.presets, babelCore, reactPreset);
        const config = Object.assign(Object.assign({}, cfg.options), { presets, plugins: [...(cfg.options.plugins || []), ...(usePlugins || [])] });
        if (api) {
            api.configBabel({ config });
        }
        return config;
    },
}));
