"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const resolve = __importStar(require("resolve"));
const shared_1 = require("@remax/shared");
const paths_1 = require("./utils/paths");
const extensions_1 = require("../extensions");
class ProjectPath {
    constructor(builder) {
        this.builder = builder;
    }
    outputDir() {
        return shared_1.slash(path.join(this.builder.options.cwd, this.builder.options.output));
    }
    srcDir() {
        return shared_1.slash(path.join(this.builder.options.cwd, this.builder.options.rootDir));
    }
    publicDir() {
        return shared_1.slash(path.join(this.builder.options.cwd, 'public'));
    }
    appConfigFile() {
        return this.searchJSFile(path.join(this.srcDir(), 'app.config')) || this.srcFile('app.json');
    }
    pluginConfigFile() {
        return this.searchJSFile(path.join(this.srcDir(), 'plugin.config')) || this.srcFile('plugin.json');
    }
    srcFile(file) {
        return path.join(this.srcDir(), file);
    }
    componentConfigFile(componentFile) {
        return this.searchJSFile(paths_1.replaceExtension(componentFile, '.config'));
    }
    resolveAsset(request, from) {
        if (request.startsWith('/')) {
            return path.join(this.builder.options.cwd, this.builder.options.rootDir, request);
        }
        try {
            return resolve.sync(request, { basedir: path.dirname(from) });
        }
        catch (e) {
            return null;
        }
    }
    searchJSFile(file) {
        for (const e of extensions_1.targetExtensions(this.builder.target)) {
            const extFile = file + e;
            if (fs.existsSync(extFile)) {
                return shared_1.slash(extFile);
            }
        }
        return '';
    }
}
exports.default = ProjectPath;
