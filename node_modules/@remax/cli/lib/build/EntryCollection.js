"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const shared_1 = require("@remax/shared");
const paths_1 = require("./utils/paths");
const NormalEntry_1 = __importDefault(require("./entries/NormalEntry"));
const NativeEntry_1 = __importDefault(require("./entries/NativeEntry"));
const AppEntry_1 = __importDefault(require("./entries/AppEntry"));
const PageEntry_1 = __importDefault(require("./entries/PageEntry"));
const ComponentEntry_1 = __importDefault(require("./entries/ComponentEntry"));
const MpaEntry_1 = __importDefault(require("./entries/MpaEntry"));
class EntryCollection {
    constructor(builder) {
        this.appEntry = null;
        this.mainEntry = null;
        this.nativeComponentEntries = new Map();
        this.entries = new Map();
        this.builder = builder;
    }
    init() {
        this.appEntry = this.initAppEntry();
        this.mainEntry = this.initMainEntry();
        this.entries = this.initEntries();
    }
    initAppEntry() {
        const appFile = this.builder.projectPath.searchJSFile(path.join(this.builder.projectPath.srcDir(), 'app'));
        if (!fs.existsSync(appFile)) {
            return null;
        }
        const sourceCode = fs.readFileSync(appFile).toString();
        return this.isNativeApp(sourceCode)
            ? new NativeEntry_1.default(this.builder, 'app', appFile)
            : new AppEntry_1.default(this.builder, 'app', appFile);
    }
    initMainEntry() {
        const { projectConfig, projectPath } = this.builder;
        const { main } = projectConfig;
        return main
            ? new NormalEntry_1.default(this.builder, main, shared_1.slash(projectPath.searchJSFile(path.join(projectPath.srcDir(), main))))
            : null;
    }
    initEntries() {
        var _a, _b;
        const { projectConfig, projectPath } = this.builder;
        // 页面
        const pages = projectConfig.pages.reduce((ret, page) => [
            ...ret,
            {
                name: page,
                filename: projectPath.searchJSFile(path.join(projectPath.srcDir(), page)),
            },
        ], []);
        if (['miniapp', 'webapp'].includes(this.builder.buildType)) {
            const subPackages = (_b = (_a = projectConfig.subPackages) !== null && _a !== void 0 ? _a : projectConfig.subpackages) !== null && _b !== void 0 ? _b : [];
            // 分包页面
            subPackages.forEach((pack) => {
                pages.push(...pack.pages.reduce((ret, page) => [
                    ...ret,
                    {
                        name: shared_1.slash(path.join(pack.root, page)),
                        filename: projectPath.searchJSFile(path.join(projectPath.srcDir(), pack.root, page)),
                    },
                ], []));
            });
        }
        const entries = new Map();
        pages.forEach(p => {
            var _a;
            if (!p.filename) {
                return;
            }
            let entry;
            if (this.builder.target === 'web' && ((_a = this.builder.options.web) === null || _a === void 0 ? void 0 : _a.mpa)) {
                entry = new MpaEntry_1.default(this.builder, p.name, p.filename);
            }
            else {
                entry = this.isNativeEntry(p.filename)
                    ? new NativeEntry_1.default(this.builder, p.name, p.filename)
                    : new PageEntry_1.default(this.builder, p.name, p.filename);
            }
            entries.set(p.filename, entry);
        });
        const { publicComponents = {} } = projectConfig;
        Object.keys(publicComponents).forEach(it => {
            const name = publicComponents[it];
            const filename = projectPath.searchJSFile(projectPath.srcFile(name));
            const entry = this.isNativeEntry(filename)
                ? new NativeEntry_1.default(this.builder, name, filename)
                : new ComponentEntry_1.default(this.builder, name, filename);
            entries.set(filename, entry);
        });
        return entries;
    }
    isNativeEntry(filename) {
        const templateFile = paths_1.replaceExtension(filename, this.builder.api.getMeta().template.extension);
        return fs.existsSync(templateFile);
    }
    isNativeApp(sourceCode) {
        return !/^export default /m.test(sourceCode);
    }
}
exports.default = EntryCollection;
