"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const SingleEntryDependency_1 = __importDefault(require("webpack/lib/dependencies/SingleEntryDependency"));
const webpack_virtual_modules_1 = __importDefault(require("webpack-virtual-modules"));
const NormalEntry_1 = __importDefault(require("./NormalEntry"));
const paths_1 = require("../utils/paths");
class VirtualEntry extends NormalEntry_1.default {
    constructor(builder, name, filename) {
        super(builder, name, filename);
        this.originalSource = fs.existsSync(this.filename) ? fs.readFileSync(this.filename).toString() : '';
        this.virtualPath = path.resolve(paths_1.replaceExtension(this.filename, '.entry.js'));
        this.virtualModule = new webpack_virtual_modules_1.default({
            [this.virtualPath]: this.outputSource(),
        });
    }
    outputSource() {
        return this.originalSource;
    }
    updateSource(force = false) {
        const source = fs.readFileSync(this.filename).toString();
        if (!force && source === this.originalSource) {
            return;
        }
        this.originalSource = source;
        this.virtualModule.writeModule(this.virtualPath, this.outputSource());
    }
    addToWebpack(compiler, compilation) {
        return new Promise(resolve => {
            if (!this.virtualModule._compiler) {
                this.virtualModule.apply(compiler);
                this.virtualModule.writeModule(this.virtualPath, this.outputSource());
            }
            const dep = new SingleEntryDependency_1.default(this.virtualPath);
            dep.loc = { name: this.name };
            compilation.addEntry(null, dep, this.name, resolve);
        });
    }
}
exports.default = VirtualEntry;
