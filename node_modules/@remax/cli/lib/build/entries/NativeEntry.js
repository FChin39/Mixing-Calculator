"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const paths_1 = require("../utils/paths");
const VirtualEntry_1 = __importDefault(require("./VirtualEntry"));
const NativeAssets_1 = __importDefault(require("../NativeAssets"));
const output_1 = __importDefault(require("../utils/output"));
const shared_1 = require("@remax/shared");
function normalizeName(name) {
    return name.replace(/@/g, '_');
}
class NativeEntry extends VirtualEntry_1.default {
    constructor(builder, name, filename) {
        super(builder, normalizeName(name), filename);
        this.dependentEntries = [];
        this.assets = new NativeAssets_1.default(builder, filename);
    }
    getManifest() {
        var _a;
        const dependentEntries = this.getDependentEntries();
        const rawManifest = this.readRawManifest();
        const usingComponents = (_a = rawManifest.usingComponents) !== null && _a !== void 0 ? _a : {};
        dependentEntries.forEach((entry, name) => {
            usingComponents[name] = '/' + entry.name;
        });
        return Object.assign(Object.assign({}, rawManifest), { usingComponents });
    }
    getDependentEntries() {
        const { usingComponents = {} } = this.readRawManifest();
        return Object.keys(usingComponents).reduce((acc, name) => {
            const request = usingComponents[name];
            const filename = this.builder.projectPath.resolveAsset(request + '.js', this.filename);
            if (filename && fs.existsSync(filename)) {
                if (shared_1.slash(filename) === shared_1.slash(this.filename)) {
                    return acc;
                }
                let entry = this.builder.entryCollection.nativeComponentEntries.get(filename);
                if (entry) {
                    entry.updateSource();
                }
                else {
                    const output = paths_1.getNativeAssetOutputPath(paths_1.replaceExtension(filename, ''), this.builder.options);
                    entry = new NativeEntry(this.builder, output, filename);
                }
                acc.set(name, entry);
            }
            else {
                output_1.default.warn(`${request} can not be resolved in ${this.name}'s \`usingComponents\`.`);
            }
            return acc;
        }, new Map());
    }
    getAssets() {
        return this.assets.getAll();
    }
    watchAssets(loaderContext) {
        this.assets.getAll().forEach(asset => {
            loaderContext.addDependency(asset.filename);
        });
        loaderContext.addDependency(this.rawManifestFile);
        loaderContext.addDependency(this.filename);
    }
    get rawManifestFile() {
        return paths_1.replaceExtension(this.filename, '.json');
    }
    readRawManifest() {
        const manifestFile = this.rawManifestFile;
        if (fs.existsSync(manifestFile)) {
            try {
                return JSON.parse(fs.readFileSync(manifestFile).toString());
            }
            catch (e) {
                return {};
            }
        }
        return {};
    }
}
exports.default = NativeEntry;
