"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const babelParser = __importStar(require("@babel/parser"));
const traverse_1 = __importDefault(require("@babel/traverse"));
const htmlparser2 = __importStar(require("htmlparser2"));
const lodash_1 = require("lodash");
const paths_1 = require("./utils/paths");
class NativeAssets {
    constructor(builder, entry) {
        this.assets = new Map();
        this.builder = builder;
        this.entry = entry;
    }
    getAll() {
        this.findInTemplate();
        this.findInCSS();
        return this.assets;
    }
    addAsset(filename, content) {
        if (fs.existsSync(filename)) {
            this.assets.set(filename, {
                filename,
                output: paths_1.getNativeAssetOutputPath(filename, this.builder.options),
                content: content || fs.readFileSync(filename),
            });
        }
    }
    findInTemplate() {
        const { jsHelper, template } = this.builder.api.getMeta();
        const templateFile = paths_1.replaceExtension(this.entry, template.extension);
        const walkJsHelper = (filename) => {
            if (!fs.existsSync(filename)) {
                return;
            }
            const content = fs.readFileSync(filename);
            this.addAsset(filename, content);
            const ast = babelParser.parse(content.toString(), {
                sourceType: 'module',
            });
            const extract = ({ node }) => {
                const importPath = (lodash_1.get(node, 'callee.name') === 'require' ? lodash_1.get(node, 'arguments[0].value') : '') || lodash_1.get(node, 'source.value');
                if (!importPath) {
                    return;
                }
                const jsFile = this.builder.projectPath.resolveAsset(importPath, filename);
                if (jsFile) {
                    walkJsHelper(jsFile);
                }
            };
            traverse_1.default(ast, {
                CallExpression: extract,
                ImportDeclaration: extract,
            });
        };
        const walkTemplate = (filename) => {
            if (!fs.existsSync(filename)) {
                return;
            }
            const content = fs.readFileSync(filename);
            this.addAsset(filename, content);
            const parser = new htmlparser2.Parser({});
            parser._cbs.onopentag = (name, attrs) => {
                if (jsHelper) {
                    const { tag, src } = jsHelper;
                    if (name === tag && attrs[src]) {
                        const jsFile = this.builder.projectPath.resolveAsset(attrs[src], filename);
                        if (jsFile) {
                            walkJsHelper(jsFile);
                        }
                    }
                }
                if (name === template.tag && attrs[template.src]) {
                    const templateFile = this.builder.projectPath.resolveAsset(attrs[template.src], filename);
                    if (templateFile) {
                        walkTemplate(templateFile);
                    }
                }
                else if (['include', 'import'].includes(name) && attrs.src) {
                    let request = attrs.src;
                    /**
                     * 微信支持不写 ./ 引用当前路径
                     * https://developers.weixin.qq.com/miniprogram/dev/reference/wxml/import.html
                     */
                    if (!/^(\.\/|\/)/.test(request)) {
                        request = './' + request;
                    }
                    const templateFile = this.builder.projectPath.resolveAsset(request, filename);
                    if (templateFile) {
                        walkTemplate(templateFile);
                    }
                }
                else if (name === 'image' && attrs.src) {
                    const image = this.builder.projectPath.resolveAsset(attrs.src, filename);
                    if (image) {
                        this.addAsset(image);
                    }
                }
            };
            parser.reset();
            parser.write(content.toString());
            parser.end();
        };
        walkTemplate(templateFile);
    }
    findInCSS() {
        const cssFile = paths_1.replaceExtension(this.entry, this.builder.api.getMeta().style);
        // https://regexr.com/5fa60
        const URL_PATTERN = /(?<=url\(\s*['"]?)([^"')]+)(?=["']?\s*\))/gm;
        // https://regexr.com/5fa69
        const IMPORT_PATTERN = /(?<=@import\s*(\(.+\))?\s*["'])(.+)(?=["'])/gm;
        const walkCSS = (filename) => {
            if (!fs.existsSync(filename)) {
                return;
            }
            const content = fs.readFileSync(filename);
            const contentStr = content.toString();
            const urls = contentStr.match(URL_PATTERN);
            if (urls) {
                urls.forEach((url) => {
                    if (!(url.startsWith('http://') || url.startsWith('https://'))) {
                        const image = this.builder.projectPath.resolveAsset(url, filename);
                        if (image) {
                            this.addAsset(image);
                        }
                    }
                });
            }
            const imports = contentStr.match(IMPORT_PATTERN);
            if (imports) {
                imports.forEach((request) => {
                    const cssFile = this.builder.projectPath.resolveAsset(request, filename);
                    if (cssFile) {
                        walkCSS(cssFile);
                    }
                });
            }
        };
        walkCSS(cssFile);
    }
}
exports.default = NativeAssets;
