"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chokidar_1 = __importDefault(require("chokidar"));
const SingleEntryPlugin_1 = __importDefault(require("webpack/lib/SingleEntryPlugin"));
let isRunning = true;
function watch(builder, watcher, addEntry = false) {
    // 监听额外的文件
    const { entries } = builder.entryCollection;
    chokidar_1.default
        .watch([`${builder.options.rootDir}/app.config.{js,ts}`], {
        cwd: builder.options.cwd,
    })
        .on('change', () => {
        if (isRunning)
            return;
        if (addEntry) {
            builder.fetchProjectConfig();
            builder.entryCollection.init();
            const nextEntries = builder.entryCollection.entries;
            nextEntries.forEach(entry => {
                if (!entries.get(entry.filename)) {
                    entry.virtualModule.apply(builder.webpackCompiler);
                    entry.updateSource(true);
                    new SingleEntryPlugin_1.default(null, entry.virtualPath, entry.name).apply(builder.webpackCompiler);
                }
            });
        }
        watcher.invalidate();
    });
    chokidar_1.default
        .watch([`${builder.options.rootDir}/**/!(app).config.{js,ts}`], {
        cwd: builder.options.cwd,
    })
        .on('all', () => {
        if (isRunning)
            return;
        watcher.invalidate();
    });
    builder.webpackCompiler.hooks.watchRun.tap('watchRun', () => {
        isRunning = true;
    });
    builder.webpackCompiler.hooks.done.tap('done', () => {
        isRunning = false;
    });
    return watcher;
}
exports.default = watch;
