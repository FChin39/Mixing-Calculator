"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Builder_1 = __importDefault(require("./Builder"));
const output_1 = __importDefault(require("./utils/output"));
const watch_1 = __importDefault(require("./watch"));
const config_mini_1 = __importDefault(require("./webpack/config.mini"));
class MiniBuilder extends Builder_1.default {
    constructor(api, options) {
        super(api, options, 'miniapp');
    }
    createWebpackConfig() {
        return config_mini_1.default(this);
    }
    run() {
        if (this.options.watch) {
            this.watch();
        }
        else {
            this.build();
        }
        return this.webpackCompiler;
    }
    build() {
        this.webpackCompiler.run((error, stats) => {
            if (error) {
                output_1.default.error(error.message);
                throw error;
            }
            const info = stats.toJson();
            if (stats.hasErrors()) {
                info.errors.forEach(error => {
                    output_1.default.error(error);
                });
                process.exit(1);
            }
            if (stats.hasWarnings()) {
                console.warn(info.warnings.join('\n'));
            }
        });
    }
    watch() {
        const watcher = this.webpackCompiler.watch({}, (error, stats) => {
            if (error) {
                console.log(error);
                output_1.default.error(error.message);
                throw error;
            }
            const info = stats.toJson();
            if (stats.hasErrors()) {
                info.errors.forEach(error => {
                    output_1.default.error(error);
                });
            }
            if (stats.hasWarnings()) {
                console.warn(info.warnings.join('\n'));
            }
            // 适配阿里小程序 IDE
            if (this.options.target === 'ali') {
                output_1.default.message('Watching for changes...', 'green', this.options.notify);
            }
        });
        watch_1.default(this, watcher, true);
        return watcher;
    }
}
exports.default = MiniBuilder;
