var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { filterProps } from '../../utils/isPlatformSpecifyProp';
import clsx from 'clsx';
var WebView = function (props, ref) {
    var _a = filterProps(props), onMessage = _a.onMessage, restProps = __rest(_a, ["onMessage"]);
    React.useEffect(function () {
        var listener = function (event) {
            if (typeof onMessage === 'function') {
                onMessage(event);
            }
        };
        window.addEventListener('message', listener, false);
        return function () { return window.removeEventListener('message', listener); };
    }, []);
    return React.createElement("iframe", __assign({}, restProps, { className: clsx('remax-web-view', props.className), ref: ref }));
};
export default React.forwardRef(WebView);
