var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { filterProps } from '../../utils/isPlatformSpecifyProp';
import modeStyle from './modeStyle';
import clsx from 'clsx';
var Image = function (props, ref) {
    var _a = filterProps(props), className = _a.className, src = _a.src, style = _a.style, _b = _a.mode, mode = _b === void 0 ? 'scaleToFill' : _b, onTap = _a.onTap, onLoad = _a.onLoad, onError = _a.onError, restProps = __rest(_a, ["className", "src", "style", "mode", "onTap", "onLoad", "onError"]);
    var isWidthFixMode = mode === 'widthFix';
    return (React.createElement("div", __assign({}, restProps, { onClick: onTap, className: clsx('remax-image', className), style: __assign(__assign(__assign({}, modeStyle[mode]), { backgroundImage: "url(" + src + ")", backgroundRepeat: "no-repeat" }), style) }),
        React.createElement("img", { src: src, ref: ref, style: {
                visibility: 'hidden',
                width: isWidthFixMode ? '100%' : undefined,
                height: isWidthFixMode ? 'auto' : '1px',
            }, onLoad: onLoad, onError: onError })));
};
export default React.forwardRef(Image);
