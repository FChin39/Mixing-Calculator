var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import { isUnitlessNumber } from './CSSProperty';
import { RuntimeOptions } from '@remax/framework-shared';
var vendorPrefixes = ['webkit', 'moz', 'ms', 'o'];
var transformReactStyleKey = function (key) {
    // css3 var
    if (key === null || key === void 0 ? void 0 : key.startsWith('--')) {
        return key;
    }
    var styleValue = key.replace(/\.?([A-Z]+)/g, function (_x, y) {
        return '-' + y.toLowerCase();
    });
    // vendor prefix
    if (styleValue === null || styleValue === void 0 ? void 0 : styleValue.startsWith('-')) {
        var firstWord_1 = styleValue.split('-').filter(function (s) { return s; })[0];
        styleValue = styleValue.replace(/^-/, '');
        if (vendorPrefixes.find(function (prefix) { return prefix === firstWord_1; })) {
            styleValue = '-' + styleValue;
        }
    }
    return styleValue;
};
var transformPx = function (value) {
    if (typeof value !== 'string') {
        return value;
    }
    return value.replace(/\b(\d+(\.\d+)?)px\b/g, function (match, x) {
        var targetUnit = 'rem';
        var size = Number(x / 100);
        return size % 1 === 0 ? size + targetUnit : size.toFixed(2) + targetUnit;
    });
};
var plainStyle = function (style) {
    if (!style) {
        return '';
    }
    return Object.keys(style)
        .reduce(function (acc, key) {
        var value = style[key];
        if (!Number.isNaN(Number(value)) && !isUnitlessNumber[key]) {
            value = value + 'rpx';
        }
        return __spread(acc, [transformReactStyleKey(key) + ":" + (RuntimeOptions.get('pxToRpx') ? transformPx(value) : value) + ";"]);
    }, [])
        .join('\n');
};
export default plainStyle;
