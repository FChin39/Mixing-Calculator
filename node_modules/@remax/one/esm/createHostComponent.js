var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import memoizeOne from 'memoize-one';
import { formatDisplayName } from '@remax/framework-shared';
export function createTarget(target, detail) {
    return {
        id: target.id,
        offsetLeft: target.offsetLeft,
        offsetTop: target.offsetTop,
        dataset: target.targetDataset || target.dataset,
        value: detail === null || detail === void 0 ? void 0 : detail.value,
    };
}
export function createCurrentTarget(currentTarget) {
    return {
        id: currentTarget.id,
        offsetLeft: currentTarget.offsetLeft,
        offsetTop: currentTarget.offsetTop,
        dataset: currentTarget.dataset,
    };
}
export var createTapEvent = function (originalEvent) { return ({
    type: originalEvent.type,
    stopPropagation: originalEvent.stopPropagation,
    target: createTarget(originalEvent.target, originalEvent.detail),
    currentTarget: createCurrentTarget(originalEvent.currentTarget),
    originalEvent: originalEvent,
    nativeEvent: originalEvent,
}); };
export var createTouchEvent = function (originalEvent) { return ({
    type: originalEvent.type,
    stopPropagation: originalEvent.stopPropagation,
    target: createTarget(originalEvent.target, originalEvent.detail),
    currentTarget: createCurrentTarget(originalEvent.currentTarget),
    touches: originalEvent.touches,
    changedTouches: originalEvent.touches,
    originalEvent: originalEvent,
    nativeEvent: originalEvent,
}); };
export var createImageEvent = function (originalEvent) { return ({
    type: originalEvent.type,
    target: createTarget(originalEvent.target, originalEvent.detail),
    currentTarget: createCurrentTarget(originalEvent.currentTarget),
    originalEvent: originalEvent,
    nativeEvent: originalEvent,
}); };
export function createCallback(fn, eventCreator) {
    if (typeof fn !== 'function') {
        return undefined;
    }
    return function (originalEvent) { return fn(eventCreator(originalEvent)); };
}
export var createInputEvent = function (originalEvent) { return ({
    type: originalEvent.type,
    target: createTarget(originalEvent.target, originalEvent.detail),
    currentTarget: createCurrentTarget(originalEvent.currentTarget),
    originalEvent: originalEvent,
    nativeEvent: originalEvent,
}); };
export var createFormEvent = function (originalEvent) { return ({
    type: originalEvent.type,
    target: createTarget(originalEvent.target, originalEvent.detail),
    currentTarget: createCurrentTarget(originalEvent.currentTarget),
    originalEvent: originalEvent,
    nativeEvent: originalEvent,
}); };
function assignDefaultProps(inputProps, defaultProps) {
    if (defaultProps) {
        Object.keys(defaultProps).forEach(function (key) {
            var _a;
            inputProps[key] = (_a = inputProps[key]) !== null && _a !== void 0 ? _a : defaultProps[key];
        });
    }
}
export function aliasProps(props, alias) {
    var _a;
    if (!alias) {
        return props;
    }
    var nextProps = {};
    for (var key in props) {
        nextProps[(_a = alias[key]) !== null && _a !== void 0 ? _a : key] = props[key];
    }
    return nextProps;
}
var createLongTapCallback = memoizeOne(createCallback);
var createTapCallback = memoizeOne(createCallback);
var createTouchStartCallback = memoizeOne(createCallback);
var createTouchMoveCallback = memoizeOne(createCallback);
var createTouchEndCallback = memoizeOne(createCallback);
var createTouchCancelCallback = memoizeOne(createCallback);
var createChangeCallback = memoizeOne(createCallback);
var createInputCallback = memoizeOne(createCallback);
var createConfirmCallback = memoizeOne(createCallback);
var createFocusCallback = memoizeOne(createCallback);
var createBlurCallback = memoizeOne(createCallback);
var createSubmitCallback = memoizeOne(createCallback);
var createResetCallback = memoizeOne(createCallback);
var createImageLoadCallback = memoizeOne(createCallback);
var createImageErrorCallback = memoizeOne(createCallback);
export default function createHostComponent(name, alias, defaults) {
    var Component = function (props, ref) {
        var inputProps = __assign({}, props);
        // 默认属性根据平台在这里设置
        if (defaults) {
            assignDefaultProps(inputProps, defaults);
        }
        if (props.onLongTap) {
            inputProps.onLongTap = createLongTapCallback(inputProps.onLongTap, createTapEvent);
        }
        if (inputProps.onTap) {
            inputProps.onTap = createTapCallback(inputProps.onTap, createTapEvent);
        }
        if (inputProps.onTouchStart) {
            inputProps.onTouchStart = createTouchStartCallback(inputProps.onTouchStart, createTouchEvent);
        }
        if (inputProps.onTouchMove) {
            inputProps.onTouchMove = createTouchMoveCallback(inputProps.onTouchMove, createTouchEvent);
        }
        if (inputProps.onTouchEnd) {
            inputProps.onTouchEnd = createTouchEndCallback(inputProps.onTouchEnd, createTouchEvent);
        }
        if (inputProps.onTouchCancel) {
            inputProps.onTouchCancel = createTouchCancelCallback(inputProps.onTouchCancel, createTouchEvent);
        }
        if (inputProps.onChange) {
            inputProps.onChange = createChangeCallback(inputProps.onChange, createInputEvent);
        }
        if (inputProps.onInput) {
            inputProps.onInput = createInputCallback(inputProps.onInput, createInputEvent);
        }
        if (inputProps.onConfirm) {
            inputProps.onConfirm = createConfirmCallback(inputProps.onConfirm, createInputEvent);
        }
        if (inputProps.onFocus) {
            inputProps.onFocus = createFocusCallback(inputProps.onFocus, createInputEvent);
        }
        if (inputProps.onBlur) {
            inputProps.onBlur = createBlurCallback(inputProps.onBlur, createInputEvent);
        }
        if (inputProps.onSubmit) {
            inputProps.onSubmit = createSubmitCallback(inputProps.onSubmit, createFormEvent);
        }
        if (inputProps.onReset) {
            inputProps.onReset = createResetCallback(inputProps.onReset, createFormEvent);
        }
        if (name === 'image') {
            if (inputProps.onLoad) {
                inputProps.onLoad = createImageLoadCallback(props.onLoad, createImageEvent);
            }
            if (inputProps.onError) {
                inputProps.onError = createImageErrorCallback(props.onError, createImageEvent);
            }
        }
        var nextProps = inputProps;
        if (alias) {
            nextProps = aliasProps(inputProps, alias);
        }
        nextProps.ref = ref;
        return React.createElement(name, nextProps);
    };
    if (process.env.NODE_ENV === 'development') {
        Component.displayName = formatDisplayName(name);
    }
    return React.forwardRef(Component);
}
