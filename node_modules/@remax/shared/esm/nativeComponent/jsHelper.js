import fs from 'fs';
import * as babelParser from '@babel/parser';
import traverse from '@babel/traverse';
import * as htmlparser2 from 'htmlparser2';
import { get } from 'lodash';
import { getPath } from './helpers';
var walk = function (jsHelperPath, jsHelpers) {
    var jsHelperContent = fs.readFileSync(jsHelperPath).toString();
    var ast = babelParser.parse(jsHelperContent, {
        sourceType: 'module',
    });
    var extract = function (_a) {
        var node = _a.node;
        var importPath = (get(node, 'callee.name') === 'require' ? get(node, 'arguments[0].value') : '') || get(node, 'source.value');
        if (!importPath) {
            return;
        }
        var absolutePath = getPath(jsHelperPath, importPath);
        jsHelpers.add(absolutePath);
        walk(absolutePath, jsHelpers);
    };
    traverse(ast, {
        CallExpression: extract,
        ImportDeclaration: extract,
    });
};
var parseTemplate = function (filePath, jsHelpers, jsHelper) {
    var parser = new htmlparser2.Parser({});
    var _a = jsHelper, tag = _a.tag, src = _a.src;
    var content = fs.readFileSync(filePath).toString();
    parser._cbs.onopentag = function (name, attrs) {
        if (name === tag && attrs[src]) {
            var jsHelperPath = getPath(filePath, attrs[src]);
            if (!fs.existsSync(jsHelperPath)) {
                console.error("\u6587\u4EF6 " + jsHelperPath + " \u4E0D\u5B58\u5728");
                return;
            }
            walk(jsHelperPath, jsHelpers);
            jsHelpers.add(jsHelperPath);
        }
    };
    parser.reset();
    parser.write(content);
    parser.end();
};
export default function jsHelper(platformConfig, id) {
    var jsHelpers = new Set();
    var jsHelper = platformConfig.jsHelper, template = platformConfig.template;
    if (!jsHelper) {
        return [];
    }
    var templatePath = id.replace(/\.js$/, template.extension);
    parseTemplate(templatePath, jsHelpers, jsHelper);
    return Array.from(jsHelpers);
}
