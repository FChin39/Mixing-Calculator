import * as fs from 'fs';
import * as babelParser from '@babel/parser';
import traverse from '@babel/traverse';
import { get } from 'lodash';
import resolve from 'resolve';
import { getPath } from './helpers';
var walk = function (jsPath, modules, options) {
    var jsContent = fs.readFileSync(jsPath).toString();
    var ast = babelParser.parse(jsContent, {
        sourceType: 'module',
    });
    var extract = function (_a) {
        var node = _a.node;
        var importPath = (get(node, 'callee.name') === 'require' ? get(node, 'arguments[0].value') : '') || get(node, 'source.value');
        if (!importPath) {
            return;
        }
        try {
            // 尝试 resolve，失败跳过
            importPath = resolve.sync(importPath, { basedir: options.cwd });
        }
        catch (_b) {
            // ignore
        }
        var absoluteId = getPath(jsPath, importPath);
        var absolutePath = /.js$/.test(absoluteId) ? absoluteId : absoluteId + '.js';
        if (!fs.existsSync(absolutePath)) {
            absolutePath = absoluteId + '/index.js';
        }
        if (!fs.existsSync(absolutePath)) {
            return;
        }
        modules.add(absolutePath);
        walk(absolutePath, modules, options);
    };
    traverse(ast, {
        CallExpression: extract,
        ImportDeclaration: extract,
    });
};
var parseTemplate = function (filePath, modules, options) {
    walk(filePath, modules, options);
    modules.add(filePath);
};
export default function jsModule(options, id) {
    var templatePath = id;
    var modules = new Set();
    parseTemplate(templatePath, modules, options);
    return Array.from(modules);
}
