import type { ComponentManifest, HostComponent } from '@remax/types';
export interface ExtractedTemplate {
    template: string;
    id: string;
    module: string;
    isEntry: boolean;
    isolated?: boolean;
}
declare const Store: {
    collectedComponents: Map<string, ComponentManifest>;
    registeredHostComponents: Map<string, HostComponent>;
    compositionComponents: Map<string, Map<string, {
        import: string;
        props: Set<string>;
    }>>;
    nativeComponents: Map<string, {
        id: string;
    }>;
    pluginComponents: Map<string, {
        id: string;
        componentPath: string;
        importers: Set<string>;
        props: Set<string>;
    }>;
    skipHostComponents: string[];
    appEvents: Map<string, Set<string>>;
    pageEvents: Map<string, Set<string>>;
    slotView: {
        id: string;
        props: string[];
    };
    extractedTemplates: Map<string, ExtractedTemplate>;
    templateId: number;
    registerNativeComponent(componentPath: string, output: string): string;
    registerPluginComponent(componentPath: string, importer: string): string;
    getCollectedComponents(): Map<string, ComponentManifest>;
    generateTemplateId(filename: string): string;
    resetTemplateId(): void;
    reset(): void;
};
export default Store;
