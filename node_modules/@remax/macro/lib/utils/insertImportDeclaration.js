"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("@babel/types"));
function insertImportDeclaration(program, imported, source) {
    var name = imported;
    var node = program.node.body.find(function (node) { return t.isImportDeclaration(node) && node.source.value === source; });
    if (node) {
        var specifier = node.specifiers.find(function (specifier) {
            return t.isImportSpecifier(specifier) && t.isIdentifier(specifier.imported) && specifier.imported.name === name;
        });
        if (specifier) {
            name = specifier.local.name;
        }
        else {
            node.specifiers.push(t.importSpecifier(t.identifier(name), t.identifier(name)));
        }
    }
    else {
        var importDeclaration = t.importDeclaration([t.importSpecifier(t.identifier(name), t.identifier(name))], t.stringLiteral(source));
        program.node.body.unshift(importDeclaration);
    }
    return name;
}
exports.default = insertImportDeclaration;
