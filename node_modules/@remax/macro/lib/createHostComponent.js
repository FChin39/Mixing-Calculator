"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("@babel/types"));
var build_store_1 = __importDefault(require("@remax/build-store"));
var insertImportDeclaration_1 = __importDefault(require("./utils/insertImportDeclaration"));
var PACKAGE_NAME = '@remax/runtime';
var FUNCTION_NAME = 'createHostComponent';
function getConfig(callExpression) {
    var args = callExpression.node.arguments;
    var name = args[0];
    var props = args[1].elements
        .filter(function (element) { return element !== null; })
        .map(function (element) {
        if (t.isStringLiteral(element)) {
            var value = element.value;
            return [value, value];
        }
        else if (t.isArrayExpression(element)) {
            return element.elements.map(function (ele) { return ele.value; });
        }
    });
    return [name, props];
}
function createHostComponent(path, state) {
    var program = state.file.path;
    var functionName = insertImportDeclaration_1.default(program, FUNCTION_NAME, PACKAGE_NAME);
    var callExpression = path.findParent(function (p) { return t.isCallExpression(p); });
    var config = getConfig(callExpression);
    var name = config[0];
    var aliasPair = config[1];
    var props = aliasPair.map(function (prop) { return prop[0]; });
    var alias = aliasPair.reduce(function (prev, current) {
        prev[current[1]] = current[0];
        return prev;
    }, {});
    build_store_1.default.registeredHostComponents.set(name.value, {
        props: props,
        alias: alias,
        additional: true,
    });
    callExpression.replaceWith(t.callExpression(t.identifier(functionName), [name]));
}
exports.default = createHostComponent;
