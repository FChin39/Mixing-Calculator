"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var t = __importStar(require("@babel/types"));
var insertImportDeclaration_1 = __importDefault(require("./utils/insertImportDeclaration"));
var build_store_1 = __importDefault(require("@remax/build-store"));
var PACKAGE_NAME = '@remax/runtime';
var FUNCTION_NAME = 'createNativeComponent';
function getName(callExpression) {
    var args = callExpression.node.arguments;
    var name = args[0];
    return name;
}
function requirePluginComponent(path, state) {
    var importer = state.file.opts.filename;
    var program = state.file.path;
    var functionName = insertImportDeclaration_1.default(program, FUNCTION_NAME, PACKAGE_NAME);
    var callExpression = path.findParent(function (p) { return t.isCallExpression(p); });
    var name = getName(callExpression);
    name.value = build_store_1.default.registerPluginComponent(name.value, importer);
    callExpression.replaceWith(t.callExpression(t.identifier(functionName), [name]));
}
exports.default = requirePluginComponent;
