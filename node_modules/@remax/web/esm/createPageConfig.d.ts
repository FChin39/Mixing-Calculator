import * as React from 'react';
import { TabBarConfig, PageConfig } from './types';
interface PageConfigProps {
    tabBar: TabBarConfig;
    pageConfig: PageConfig;
    location: any;
    cacheLifecycles?: any;
}
export default function createPageConfig(Page: React.ComponentType<any>, name: string): {
    new (props: any): {
        state: {
            refreshing: boolean;
        };
        title: string;
        componentDidMount(): void;
        componentWillUnmount(): void;
        componentDidCache: () => void;
        componentDidRecover: () => void;
        setTitle: () => void;
        isPullDownRefreshEnabled: () => boolean | undefined;
        getReachBottomDistance: () => number;
        isReachBottom: boolean;
        scrollEvent: () => void;
        registerPageScroll: () => void;
        unregisterPageScroll: () => void;
        handleRefresh: () => Promise<void>;
        checkReachBottom: () => void;
        render(): JSX.Element;
        context: any;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<PageConfigProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<PageConfigProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<PageConfigProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<PageConfigProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<PageConfigProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<PageConfigProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<PageConfigProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<PageConfigProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<PageConfigProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    contextType?: React.Context<any> | undefined;
};
export {};
