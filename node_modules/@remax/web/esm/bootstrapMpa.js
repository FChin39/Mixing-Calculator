var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { render } from 'react-dom';
import hd from 'umi-hd';
import createAppConfig from './createAppConfig';
import { PluginDriver, RuntimeOptions } from '@remax/framework-shared';
import createPageConfig from './createPageConfig';
var noop = function () {
    // ignore
};
function createApp(options) {
    var appComponent = options.appComponent, pageComponent = options.pageComponent, page = options.page, appConfig = options.appConfig;
    var AppConfig = createAppConfig(appComponent);
    var PageConfig = createPageConfig(pageComponent, page.route);
    return (React.createElement(AppConfig, null,
        React.createElement(PageConfig, { pageConfig: __assign(__assign({}, appConfig.window), page.config), tabBar: appConfig.tabBar, location: window.location, cacheLifecycles: {
                didCache: noop,
                didRecover: noop,
            } })));
}
export default function bootstrap(options) {
    hd();
    var _a = options.plugins, plugins = _a === void 0 ? [] : _a, page = options.page;
    var pluginDriver = new PluginDriver(plugins.map(function (plugin) { return plugin.default || plugin; }));
    var history = {
        push: function (url) {
            url = history.transformUrl(url);
            console.log('not implemented');
        },
        go: function () {
            console.log('not implemented');
        },
        replace: function (url) {
            url = history.transformUrl(url);
            location.replace(url);
        },
        page: null,
        transformUrl: function (url) {
            if (!url)
                return url;
            var publicPath = '';
            if (url.startsWith('/'))
                publicPath = location.pathname.replace("/" + page.route + ".html", '');
            var arr = url.split('?');
            arr[0] = arr[0] + '.html';
            return publicPath + arr.join('?');
        },
    };
    RuntimeOptions.apply({ pluginDriver: pluginDriver, history: history, mpa: true });
    var App = createApp(options);
    render(App, document.getElementById('remax-app'));
}
