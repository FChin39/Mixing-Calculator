import * as React from 'react';
import { RuntimeOptions, ComponentInstanceContext } from '@remax/framework-shared';
import Container from './Container';
import render from './render';
export default function createComponentConfig(Component) {
    var config = {
        data: {
            action: {},
            root: {
                children: [],
            },
        },
        didMount: function () {
            if (!this.container) {
                this.init();
            }
        },
        didUpdate: function (prevProps, prevData) {
            if (prevData !== this.data) {
                return;
            }
            this.render();
        },
        didUnmount: function () {
            this.container.clearUpdate();
            render(null, this.container);
        },
        methods: {
            init: function () {
                this.component = RuntimeOptions.get('pluginDriver').onMiniComponent({
                    component: Component,
                    context: this,
                });
                this.container = new Container(this);
                this.render();
            },
            render: function () {
                this.element = render(React.createElement(ComponentInstanceContext.Provider, {
                    value: this,
                }, React.createElement(this.component, this.props)), this.container);
            },
        },
    };
    return config;
}
