var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import * as React from 'react';
import { createPageWrapper, RuntimeOptions, Lifecycle, callbackName } from '@remax/framework-shared';
import stopPullDownRefresh from './stopPullDownRefresh';
import Container from './Container';
import { createPortal } from './ReactPortal';
import render from './render';
var idCounter = 0;
function generatePageId() {
    var id = idCounter;
    var pageId = 'page_' + id;
    idCounter += 1;
    return pageId;
}
// for testing
export function resetPageId() {
    idCounter = 0;
}
export default function createPageConfig(Page, name) {
    var _a;
    var app = getApp();
    var config = {
        data: {
            root: {
                children: [],
            },
            modalRoot: {
                children: [],
            },
        },
        wrapperRef: React.createRef(),
        lifecycleCallback: {},
        onLoad: function (query) {
            var PageWrapper = createPageWrapper(Page, name);
            this.pageId = generatePageId();
            this.lifecycleCallback = {};
            this.data = {
                root: {
                    children: [],
                },
                modalRoot: {
                    children: [],
                },
            };
            this.query = query;
            this.container = new Container(this, 'root');
            this.modalContainer = new Container(this, 'modalRoot');
            var pageElement = React.createElement(PageWrapper, {
                page: this,
                query: query,
                modalContainer: this.modalContainer,
                ref: this.wrapperRef,
            });
            if (app && app._mount) {
                this.element = createPortal(pageElement, this.container, this.pageId);
                app._mount(this);
            }
            else {
                this.element = render(pageElement, this.container);
            }
            return this.callLifecycle(Lifecycle.load, query);
        },
        onUnload: function () {
            this.callLifecycle(Lifecycle.unload);
            this.unloaded = true;
            this.container.clearUpdate();
            app._unmount(this);
        },
        onTabItemTap: function (e) {
            return this.callLifecycle(Lifecycle.tabItemTap, e);
        },
        onResize: function (e) {
            return this.callLifecycle(Lifecycle.resize, e);
        },
        /**
         * Lifecycle start
         */
        registerLifecycle: function (lifecycle, callback) {
            var _this = this;
            this.lifecycleCallback[lifecycle] = this.lifecycleCallback[lifecycle] || [];
            this.lifecycleCallback[lifecycle].push(callback);
            return function () {
                _this.lifecycleCallback[lifecycle].splice(_this.lifecycleCallback[lifecycle].indexOf(callback), 1);
            };
        },
        callLifecycle: function (lifecycle) {
            var _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var callbacks = this.lifecycleCallback[lifecycle] || [];
            var result;
            callbacks.forEach(function (callback) {
                result = callback.apply(void 0, __spread(args));
            });
            if (result) {
                return result;
            }
            var callback = callbackName(lifecycle);
            if (this.wrapperRef.current && this.wrapperRef.current[callback]) {
                return (_a = this.wrapperRef.current)[callback].apply(_a, __spread(args));
            }
        },
        events: {
            // 页面返回时触发
            onBack: function (e) {
                return this.callLifecycle(Lifecycle.back, e);
            },
            // 键盘高度变化时触发
            onKeyboardHeight: function (e) {
                return this.callLifecycle(Lifecycle.keyboardHeight, e);
            },
            onTabItemTap: function (e) {
                return this.callLifecycle(Lifecycle.tabItemTap, e);
            },
            // 点击但切换tabItem前触发
            beforeTabItemTap: function () {
                return this.callLifecycle(Lifecycle.beforeTabItemTap);
            },
            onResize: function (e) {
                return this.callLifecycle(Lifecycle.resize, e);
            },
        },
        onShow: function () {
            return this.callLifecycle(Lifecycle.show);
        },
        onHide: function () {
            return this.callLifecycle(Lifecycle.hide);
        },
        onReady: function () {
            return this.callLifecycle(Lifecycle.ready);
        },
        onPullDownRefresh: function (e) {
            var result = this.callLifecycle(Lifecycle.pullDownRefresh, e);
            if (result && typeof result.then === 'function') {
                Promise.resolve(result).then(function () {
                    stopPullDownRefresh();
                });
            }
        },
        onReachBottom: function () {
            return this.callLifecycle(Lifecycle.reachBottom);
        },
        onTitleClick: function () {
            return this.callLifecycle(Lifecycle.titleClick);
        },
        onOptionMenuClick: function (e) {
            return this.callLifecycle(Lifecycle.optionMenuClick, e);
        },
        onPopMenuClick: function (e) {
            return this.callLifecycle(Lifecycle.popMenuClick, e);
        },
        onPullIntercept: function () {
            return this.callLifecycle(Lifecycle.pullIntercept);
        },
    };
    var lifecycleEvents = {
        onPageScroll: function (e) {
            return this.callLifecycle(Lifecycle.pageScroll, e);
        },
        onShareAppMessage: function (options) {
            return this.callLifecycle(Lifecycle.shareAppMessage, options) || {};
        },
        onShareTimeline: function (options) {
            return this.callLifecycle(Lifecycle.shareTimeline, options) || {};
        },
    };
    ((_a = RuntimeOptions.get('pageEvents')[name]) !== null && _a !== void 0 ? _a : []).forEach(function (eventName) {
        if (lifecycleEvents[eventName]) {
            config[eventName] = lifecycleEvents[eventName];
        }
    });
    return RuntimeOptions.get('pluginDriver').onPageConfig({ config: config, page: name });
}
