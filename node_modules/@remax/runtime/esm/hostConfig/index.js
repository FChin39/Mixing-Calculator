var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
import * as scheduler from 'scheduler';
import { REMAX_METHOD, TYPE_TEXT } from '../constants';
import { generate } from '../instanceId';
import VNode from '../VNode';
import { createCallbackProxy } from '../SyntheticEvent/createCallbackProxy';
import diffProperties from './diffProperties';
var scheduleDeferredCallback = scheduler.unstable_scheduleCallback, cancelDeferredCallback = scheduler.unstable_cancelCallback, shouldYield = scheduler.unstable_shouldYield, now = scheduler.unstable_now;
var DOM_TAG_MAP = {
    span: 'text',
    div: 'view',
    img: 'image',
};
function processProps(newProps, node, id) {
    var e_1, _a;
    var props = {};
    try {
        for (var _b = __values(Object.keys(newProps)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var propKey = _c.value;
            if (typeof newProps[propKey] === 'function') {
                var contextKey = REMAX_METHOD + "_" + id + "_" + propKey;
                node.container.createCallback(contextKey, createCallbackProxy(propKey, node, newProps[propKey]));
                props[propKey] = contextKey;
            }
            else if (propKey === 'style') {
                props[propKey] = newProps[propKey] || '';
            }
            else if (propKey === 'children') {
                // pass
            }
            else {
                props[propKey] = newProps[propKey];
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return props;
}
var rootHostContext = {};
var childHostContext = {};
export default {
    now: now,
    getPublicInstance: function (inst) {
        return inst;
    },
    getRootHostContext: function () {
        return rootHostContext;
    },
    shouldSetTextContent: function (type) {
        return type === 'stub-block';
    },
    prepareForCommit: function () {
        // nothing to do
    },
    resetAfterCommit: function (container) {
        container.applyUpdate();
    },
    getChildHostContext: function () {
        return childHostContext;
    },
    createInstance: function (type, newProps, container) {
        var _a;
        var id = generate();
        var node = new VNode({
            id: id,
            type: (_a = DOM_TAG_MAP[type]) !== null && _a !== void 0 ? _a : type,
            props: {},
            container: container,
        });
        node.props = processProps(newProps, node, id);
        return node;
    },
    createTextInstance: function (text, container) {
        var id = generate();
        var node = new VNode({
            id: id,
            type: TYPE_TEXT,
            props: null,
            container: container,
        });
        node.text = text;
        return node;
    },
    commitTextUpdate: function (node, oldText, newText) {
        if (oldText !== newText) {
            node.text = newText;
            node.update();
        }
    },
    prepareUpdate: function (node, type, lastProps, nextProps) {
        lastProps = processProps(lastProps, node, node.id);
        nextProps = processProps(nextProps, node, node.id);
        return diffProperties(lastProps, nextProps);
    },
    commitUpdate: function (node, updatePayload, type, oldProps, newProps) {
        node.props = processProps(newProps, node, node.id);
        node.update(updatePayload);
    },
    appendInitialChild: function (parent, child) {
        parent.appendChild(child);
    },
    appendChild: function (parent, child) {
        parent.appendChild(child);
    },
    insertBefore: function (parent, child, beforeChild) {
        parent.insertBefore(child, beforeChild);
    },
    removeChild: function (parent, child) {
        parent.removeChild(child);
    },
    finalizeInitialChildren: function () {
        return false;
    },
    appendChildToContainer: function (container, child) {
        container.appendChild(child);
        child.mounted = true;
    },
    insertInContainerBefore: function (container, child, beforeChild) {
        container.insertBefore(child, beforeChild);
    },
    removeChildFromContainer: function (container, child) {
        container.removeChild(child);
    },
    hideInstance: function (instance) {
        var _a;
        var originStyle = (_a = instance.props) === null || _a === void 0 ? void 0 : _a.style;
        var newStyle = Object.assign({}, originStyle || {}, { display: 'none' }); // 微信和阿里的小程序都不支持在内联样式中加`important!`
        instance.props = Object.assign({}, instance.props || {}, { style: newStyle });
        instance.update();
    },
    hideTextInstance: function (instance) {
        instance.text = '';
        instance.update();
    },
    unhideInstance: function (instance, props) {
        instance.props = props;
        instance.update();
    },
    unhideTextInstance: function (instance, text) {
        instance.text = text;
        instance.update();
    },
    schedulePassiveEffects: scheduleDeferredCallback,
    cancelPassiveEffects: cancelDeferredCallback,
    shouldYield: shouldYield,
    scheduleDeferredCallback: scheduleDeferredCallback,
    cancelDeferredCallback: cancelDeferredCallback,
    supportsMutation: true,
};
