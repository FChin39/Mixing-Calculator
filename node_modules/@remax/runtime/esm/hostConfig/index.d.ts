import VNode from '../VNode';
import Container from '../Container';
declare const _default: {
    now: any;
    getPublicInstance: <T>(inst: T) => T;
    getRootHostContext: () => {};
    shouldSetTextContent(type: string): boolean;
    prepareForCommit: () => void;
    resetAfterCommit: (container: Container) => void;
    getChildHostContext: () => {};
    createInstance(type: string, newProps: any, container: Container): VNode;
    createTextInstance(text: string, container: Container): VNode;
    commitTextUpdate(node: VNode, oldText: string, newText: string): void;
    prepareUpdate(node: VNode, type: string, lastProps: any, nextProps: any): any[] | null;
    commitUpdate(node: VNode, updatePayload: any, type: string, oldProps: any, newProps: any): void;
    appendInitialChild: (parent: VNode, child: VNode) => void;
    appendChild(parent: VNode, child: VNode): void;
    insertBefore(parent: VNode, child: VNode, beforeChild: VNode): void;
    removeChild(parent: VNode, child: VNode): void;
    finalizeInitialChildren: () => boolean;
    appendChildToContainer(container: any, child: VNode): void;
    insertInContainerBefore(container: any, child: VNode, beforeChild: VNode): void;
    removeChildFromContainer(container: any, child: VNode): void;
    hideInstance(instance: VNode): void;
    hideTextInstance(instance: VNode): void;
    unhideInstance(instance: VNode, props: any): void;
    unhideTextInstance(instance: VNode, text: string): void;
    schedulePassiveEffects: any;
    cancelPassiveEffects: any;
    shouldYield: any;
    scheduleDeferredCallback: any;
    cancelDeferredCallback: any;
    supportsMutation: boolean;
};
export default _default;
