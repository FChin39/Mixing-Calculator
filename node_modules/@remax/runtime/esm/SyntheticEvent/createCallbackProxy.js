var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
import stopPropagation, { validate as validatePropagation, isPropagationStopped } from './stopPropagation';
import { SYNTHETIC_TYPES, DEPRECATED_CATCH_TYPE } from './constants';
function isSyntheticType(inputType) {
    if (DEPRECATED_CATCH_TYPE === inputType) {
        console.warn('DEPRECATION: remax 已支持在 onClick 事件中使用 stopPropagation 阻止事件冒泡，请尽量不要使用 catchClick');
    }
    return !!SYNTHETIC_TYPES.find(function (type) { return type === inputType; });
}
function createBaseSyntheticEvent(node, eventType, nativeEvent) {
    if (!nativeEvent) {
        return;
    }
    // 添加阻止冒泡方法
    nativeEvent.stopPropagation = function () {
        stopPropagation(node, eventType);
    };
    return nativeEvent;
}
export function createCallbackProxy(eventType, node, callback) {
    if (!isSyntheticType(eventType)) {
        return callback;
    }
    return function (nativeEvent) {
        var restParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            restParams[_i - 1] = arguments[_i];
        }
        var syntheticEvent = createBaseSyntheticEvent(node, eventType, nativeEvent);
        if (isPropagationStopped[eventType]) {
            validatePropagation(node, eventType);
            return;
        }
        return callback.apply(void 0, __spread([syntheticEvent], restParams));
    };
}
