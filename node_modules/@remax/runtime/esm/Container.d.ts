import VNode, { RawNode } from './VNode';
import { FiberRoot } from 'react-reconciler';
interface SpliceUpdate {
    path: string[];
    start: number;
    id: number;
    deleteCount: number;
    items: RawNode[];
    children?: RawNode[];
    type: 'splice';
    node: VNode;
}
interface SetUpdate {
    path: string[];
    name: string;
    value: any;
    type: 'set';
    node: VNode;
}
export default class Container {
    context: any;
    root: VNode;
    rootKey: string;
    updateQueue: Array<SpliceUpdate | SetUpdate>;
    _rootContainer?: FiberRoot;
    stopUpdate?: boolean;
    rendered: boolean;
    constructor(context: any, rootKey?: string);
    requestUpdate(update: SpliceUpdate | SetUpdate): void;
    normalizeUpdatePath(paths: string[]): string;
    applyUpdate(): void;
    clearUpdate(): void;
    createCallback(name: string, fn: (...params: any) => any): void;
    appendChild(child: VNode): void;
    removeChild(child: VNode): void;
    insertBefore(child: VNode, beforeChild: VNode): void;
}
export {};
