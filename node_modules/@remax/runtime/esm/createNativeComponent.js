var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
export default function createNativeComponent(name) {
    return React.forwardRef(function (props, ref) {
        var newProps = __assign({}, props);
        newProps.__ref =
            typeof ref === 'function'
                ? ref
                : function (e) {
                    if (ref) {
                        ref.current = e;
                    }
                };
        return React.createElement(name, newProps, props.children);
    });
}
