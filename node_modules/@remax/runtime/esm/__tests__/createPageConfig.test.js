import * as React from 'react';
import { createPageConfig, createAppConfig, usePageEvent } from '../../src';
import { useQuery } from '../hooks';
import { resetPageId } from '../createPageConfig';
import Page from './helpers/Page';
var ALL_EVENTS_PAGE = 'pages/test/index';
var NO_APP_SHARE_AND_PAGE_SCROLL_PAGE = 'pages/test/only/onshow';
describe('page query hook', function () {
    beforeEach(function () {
        // mock mini program getApp api
        var app = createAppConfig(undefined);
        app.onLaunch();
        // @ts-ignore
        global.getApp = function () { return app; };
    });
    afterEach(function () {
        resetPageId();
        // @ts-ignore
        global.getApp = undefined;
    });
    it('useQuery will get the query from onLoad', function () {
        function Page(config) {
            return Object.assign(config, {
                // eslint-disable-next-line @typescript-eslint/no-empty-function
                setData: function () { },
            });
        }
        var pageQuery = { id: 1 };
        var receivedQuery;
        var TestPage = function () {
            var query = useQuery();
            receivedQuery = query;
            return React.createElement("div", null, query.id);
        };
        var page = Page(createPageConfig(TestPage, ALL_EVENTS_PAGE));
        page.onLoad(pageQuery);
        expect(receivedQuery).toBe(pageQuery);
        expect(receivedQuery.id).toBe(1);
        page.onUnload();
    });
    it('create page id for each page instance', function () {
        var TestPage = function () {
            return React.createElement("div", null, "hello");
        };
        var page1 = Page(createPageConfig(TestPage, ALL_EVENTS_PAGE));
        var page2 = Page(createPageConfig(TestPage, ALL_EVENTS_PAGE));
        page1.load();
        page2.load();
        expect(page1.config.pageId).toBe('page_0');
        expect(page2.config.pageId).toBe('page_1');
    });
    it('onPullDownRefresh can handle promise returned by callback', function (done) {
        var TestPage = function () {
            usePageEvent('onPullDownRefresh', function () {
                return new Promise(function (resolve) {
                    resolve();
                    done();
                });
            });
            return React.createElement("div", null);
        };
        var page = Page(createPageConfig(TestPage, ALL_EVENTS_PAGE));
        page.load();
        page.pullDownRefresh();
    });
    it('register event correctly', function () {
        var TestPage = function () {
            return React.createElement("div", null);
        };
        var page = Page(createPageConfig(TestPage, NO_APP_SHARE_AND_PAGE_SCROLL_PAGE));
        page.load();
        page.show();
        expect(function () {
            page.shareAppMessage();
        }).toThrow();
        expect(function () {
            page.pageScroll();
        }).toThrow();
    });
});
