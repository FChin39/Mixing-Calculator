"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var propsAlias_1 = __importStar(require("./propsAlias"));
var constants_1 = require("./constants");
var framework_shared_1 = require("@remax/framework-shared");
function toRawNode(node) {
    if (node.type === constants_1.TYPE_TEXT) {
        return {
            id: node.id,
            type: node.type,
            text: node.text,
        };
    }
    return {
        id: node.id,
        type: node.type,
        props: propsAlias_1.default(node.props, node.type),
        children: [],
        text: node.text,
    };
}
function toRawProps(prop, value, type) {
    return propsAlias_1.propAlias(prop, value, type);
}
var VNode = /** @class */ (function () {
    function VNode(_a) {
        var id = _a.id, type = _a.type, props = _a.props, container = _a.container;
        this.mounted = false;
        this.deleted = false;
        this.parent = null;
        this.firstChild = null;
        this.lastChild = null;
        this.size = 0;
        this.previousSibling = null;
        this.nextSibling = null;
        this.id = id;
        this.container = container;
        this.type = type;
        this.props = props;
    }
    VNode.prototype.appendChild = function (node) {
        this.removeChild(node);
        this.size += 1;
        node.parent = this;
        node.deleted = false; // 交换节点时删除的节点会被复用
        if (!this.firstChild) {
            this.firstChild = node;
        }
        if (this.lastChild) {
            this.lastChild.nextSibling = node;
            node.previousSibling = this.lastChild;
        }
        this.lastChild = node;
        if (this.isMounted()) {
            this.container.requestUpdate({
                type: 'splice',
                path: this.path,
                start: node.index,
                id: node.id,
                deleteCount: 0,
                children: this.children,
                items: [node.toJSON()],
                node: this,
            });
        }
    };
    VNode.prototype.removeChild = function (node) {
        var previousSibling = node.previousSibling, nextSibling = node.nextSibling;
        if (node.parent !== this) {
            return;
        }
        var index = node.index;
        this.size -= 1;
        if (this.firstChild === node) {
            this.firstChild = node.nextSibling;
        }
        if (this.lastChild === node) {
            this.lastChild = node.previousSibling;
        }
        if (previousSibling) {
            previousSibling.nextSibling = nextSibling;
        }
        if (nextSibling) {
            nextSibling.previousSibling = previousSibling;
        }
        node.previousSibling = null;
        node.nextSibling = null;
        node.deleted = true;
        if (this.isMounted()) {
            this.container.requestUpdate({
                type: 'splice',
                path: this.path,
                start: index,
                id: node.id,
                deleteCount: 1,
                children: this.children,
                items: [],
                node: this,
            });
        }
    };
    VNode.prototype.insertBefore = function (node, referenceNode) {
        this.removeChild(node);
        this.size += 1;
        node.parent = this;
        node.deleted = false; // 交换节点时删除的节点会被复用
        if (referenceNode === this.firstChild) {
            this.firstChild = node;
        }
        if (referenceNode.previousSibling) {
            referenceNode.previousSibling.nextSibling = node;
            node.previousSibling = referenceNode.previousSibling;
        }
        referenceNode.previousSibling = node;
        node.nextSibling = referenceNode;
        if (this.isMounted()) {
            this.container.requestUpdate({
                type: 'splice',
                path: this.path,
                start: node.index,
                id: node.id,
                deleteCount: 0,
                children: this.children,
                items: [node.toJSON()],
                node: this,
            });
        }
    };
    VNode.prototype.update = function (payload) {
        if (this.type === 'text' || !payload) {
            this.container.requestUpdate({
                type: 'splice',
                // root 不会更新，所以肯定有 parent
                path: this.parent.path,
                start: this.index,
                id: this.id,
                deleteCount: 1,
                items: [this.toJSON()],
                node: this,
            });
            return;
        }
        for (var i = 0; i < payload.length; i = i + 2) {
            var _a = __read(toRawProps(payload[i], payload[i + 1], this.type), 2), propName = _a[0], propValue = _a[1];
            var path = __spread(this.parent.path, ['nodes', this.id.toString(), 'props']);
            if (framework_shared_1.RuntimeOptions.get('platform') === 'ali') {
                path = __spread(this.parent.path, ["children[" + this.index + "].props"]);
            }
            this.container.requestUpdate({
                type: 'set',
                path: path,
                name: propName,
                value: propValue,
                node: this,
            });
        }
    };
    Object.defineProperty(VNode.prototype, "index", {
        get: function () {
            var value = 0;
            var previousSibling = this.previousSibling;
            while (previousSibling) {
                value += 1;
                previousSibling = previousSibling.previousSibling;
            }
            return value;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VNode.prototype, "children", {
        get: function () {
            var arr = [];
            var item = this.firstChild;
            while (item) {
                arr.push(item);
                item = item.nextSibling;
            }
            return arr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(VNode.prototype, "path", {
        get: function () {
            var dataPath = [];
            var parents = [];
            var parent = this.parent;
            while (parent) {
                parents.unshift(parent);
                parent = parent.parent;
            }
            for (var i = 0; i < parents.length; i++) {
                var child = parents[i + 1] || this;
                if (framework_shared_1.RuntimeOptions.get('platform') === 'ali') {
                    dataPath.push('children');
                    dataPath.push(child.index.toString());
                }
                else {
                    dataPath.push('nodes');
                    dataPath.push(child.id.toString());
                }
            }
            return dataPath;
        },
        enumerable: false,
        configurable: true
    });
    VNode.prototype.isMounted = function () {
        return this.parent ? this.parent.isMounted() : this.mounted;
    };
    VNode.prototype.isDeleted = function () {
        var _a, _b;
        return this.deleted === true ? this.deleted : (_b = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.isDeleted()) !== null && _b !== void 0 ? _b : false;
    };
    VNode.prototype.toJSON = function () {
        var stack = [];
        var rawNode = toRawNode(this);
        stack.push({
            currentNode: rawNode,
            children: this.children,
        });
        while (stack.length > 0) {
            // while 循环已经保证了不会有空值
            var stackItem = stack.pop();
            var _a = stackItem.children, children = _a === void 0 ? [] : _a, currentNode = stackItem.currentNode;
            for (var i = children.length - 1; i >= 0; i--) {
                var currentVNode = children[i];
                var currentRawNode = toRawNode(currentVNode);
                if (framework_shared_1.RuntimeOptions.get('platform') !== 'ali') {
                    currentNode.children.unshift(currentRawNode.id);
                }
                else {
                    currentNode.children.unshift(currentRawNode);
                }
                if (framework_shared_1.RuntimeOptions.get('platform') !== 'ali') {
                    if (!currentNode.nodes) {
                        currentNode.nodes = {};
                    }
                    currentNode.nodes[currentRawNode.id] = currentRawNode;
                }
                stack.push({
                    currentNode: currentRawNode,
                    children: currentVNode.children,
                });
            }
        }
        return rawNode;
    };
    return VNode;
}());
exports.default = VNode;
