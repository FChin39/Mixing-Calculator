import Container from './Container';
export interface RawNode {
    id: number;
    type: string;
    props?: any;
    nodes?: {
        [key: number]: RawNode;
    };
    children?: Array<RawNode | number>;
    text?: string;
}
export default class VNode {
    id: number;
    container: Container;
    mounted: boolean;
    deleted: boolean;
    type: string;
    props?: any;
    parent: VNode | null;
    firstChild: VNode | null;
    lastChild: VNode | null;
    size: number;
    previousSibling: VNode | null;
    nextSibling: VNode | null;
    text?: string;
    constructor({ id, type, props, container }: {
        id: number;
        type: string;
        props?: any;
        container: any;
    });
    appendChild(node: VNode): void;
    removeChild(node: VNode): void;
    insertBefore(node: VNode, referenceNode: VNode): void;
    update(payload?: any[]): void;
    get index(): number;
    get children(): VNode[];
    get path(): string[];
    isMounted(): boolean;
    isDeleted(): boolean;
    toJSON(): RawNode;
}
