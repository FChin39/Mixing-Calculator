"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var VNode_1 = __importDefault(require("./VNode"));
var instanceId_1 = require("./instanceId");
var nativeEffect_1 = __importDefault(require("./nativeEffect"));
var framework_shared_1 = require("@remax/framework-shared");
var Container = /** @class */ (function () {
    function Container(context, rootKey) {
        if (rootKey === void 0) { rootKey = 'root'; }
        this.updateQueue = [];
        this.rendered = false;
        this.context = context;
        this.root = new VNode_1.default({
            id: instanceId_1.generate(),
            type: 'root',
            container: this,
        });
        this.root.mounted = true;
        this.rootKey = rootKey;
    }
    Container.prototype.requestUpdate = function (update) {
        this.updateQueue.push(update);
    };
    Container.prototype.normalizeUpdatePath = function (paths) {
        return __spread([this.rootKey], paths).join('.');
    };
    Container.prototype.applyUpdate = function () {
        var _this = this;
        if (this.stopUpdate || this.updateQueue.length === 0) {
            return;
        }
        var startTime = new Date().getTime();
        if (typeof this.context.$spliceData === 'function') {
            var $batchedUpdates = function (callback) {
                callback();
            };
            if (typeof this.context.$batchedUpdates === 'function') {
                $batchedUpdates = this.context.$batchedUpdates;
            }
            $batchedUpdates(function () {
                _this.updateQueue.map(function (update, index) {
                    var _a, _b;
                    var callback = undefined;
                    if (index + 1 === _this.updateQueue.length) {
                        callback = function () {
                            nativeEffect_1.default.run();
                            /* istanbul ignore next */
                            if (framework_shared_1.RuntimeOptions.get('debug')) {
                                console.log("setData => \u56DE\u8C03\u65F6\u95F4\uFF1A" + (new Date().getTime() - startTime) + "ms");
                            }
                        };
                    }
                    if (update.type === 'splice') {
                        _this.context.$spliceData((_a = {},
                            _a[_this.normalizeUpdatePath(__spread(update.path, ['children']))] = __spread([
                                update.start,
                                update.deleteCount
                            ], update.items),
                            _a), callback);
                    }
                    if (update.type === 'set') {
                        _this.context.setData((_b = {},
                            _b[_this.normalizeUpdatePath(__spread(update.path, [update.name]))] = update.value,
                            _b), callback);
                    }
                });
            });
            this.updateQueue = [];
            return;
        }
        var updatePayload = this.updateQueue.reduce(function (acc, update) {
            if (update.node.isDeleted()) {
                return acc;
            }
            if (update.type === 'splice') {
                acc[_this.normalizeUpdatePath(__spread(update.path, ['nodes', update.id.toString()]))] = update.items[0] || null;
                if (update.children) {
                    acc[_this.normalizeUpdatePath(__spread(update.path, ['children']))] = (update.children || []).map(function (c) { return c.id; });
                }
            }
            else {
                acc[_this.normalizeUpdatePath(__spread(update.path, [update.name]))] = update.value;
            }
            return acc;
        }, {});
        this.context.setData(updatePayload, function () {
            nativeEffect_1.default.run();
            /* istanbul ignore next */
            if (framework_shared_1.RuntimeOptions.get('debug')) {
                console.log("setData => \u56DE\u8C03\u65F6\u95F4\uFF1A" + (new Date().getTime() - startTime) + "ms", updatePayload);
            }
        });
        this.updateQueue = [];
    };
    Container.prototype.clearUpdate = function () {
        this.stopUpdate = true;
    };
    Container.prototype.createCallback = function (name, fn) {
        this.context[name] = fn;
    };
    Container.prototype.appendChild = function (child) {
        this.root.appendChild(child);
    };
    Container.prototype.removeChild = function (child) {
        this.root.removeChild(child);
    };
    Container.prototype.insertBefore = function (child, beforeChild) {
        this.root.insertBefore(child, beforeChild);
    };
    return Container;
}());
exports.default = Container;
