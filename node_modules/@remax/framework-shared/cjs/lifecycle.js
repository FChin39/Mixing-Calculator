"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerLifecycle = exports.callbackName = exports.lifeCycleName = exports.AppLifecycle = exports.Lifecycle = void 0;
var capitalize_1 = __importDefault(require("./utils/capitalize"));
var lowercase_1 = __importDefault(require("./utils/lowercase"));
var Lifecycle;
(function (Lifecycle) {
    Lifecycle["load"] = "load";
    Lifecycle["show"] = "show";
    Lifecycle["hide"] = "hide";
    Lifecycle["ready"] = "ready";
    Lifecycle["pullDownRefresh"] = "pullDownRefresh";
    Lifecycle["reachBottom"] = "reachBottom";
    Lifecycle["pageScroll"] = "pageScroll";
    Lifecycle["shareAppMessage"] = "shareAppMessage";
    Lifecycle["shareTimeline"] = "shareTimeline";
    Lifecycle["titleClick"] = "titleClick";
    Lifecycle["optionMenuClick"] = "optionMenuClick";
    Lifecycle["popMenuClick"] = "popMenuClick";
    Lifecycle["pullIntercept"] = "pullIntercept";
    Lifecycle["back"] = "back";
    Lifecycle["keyboardHeight"] = "keyboardHeight";
    Lifecycle["tabItemTap"] = "tabItemTap";
    Lifecycle["beforeTabItemTap"] = "beforeTabItemTap";
    Lifecycle["resize"] = "resize";
    Lifecycle["unload"] = "unload";
})(Lifecycle = exports.Lifecycle || (exports.Lifecycle = {}));
var AppLifecycle;
(function (AppLifecycle) {
    AppLifecycle["launch"] = "launch";
    AppLifecycle["show"] = "show";
    AppLifecycle["hide"] = "hide";
    AppLifecycle["error"] = "error";
    AppLifecycle["shareAppMessage"] = "shareAppMessage";
    AppLifecycle["pageNotFound"] = "pageNotFound";
    AppLifecycle["unhandledRejection"] = "unhandledRejection";
    AppLifecycle["themeChange"] = "themeChange";
})(AppLifecycle = exports.AppLifecycle || (exports.AppLifecycle = {}));
function lifeCycleName(name) {
    if (name.startsWith('before')) {
        return name;
    }
    return lowercase_1.default(name.slice(2));
}
exports.lifeCycleName = lifeCycleName;
function callbackName(name) {
    if (name.startsWith('before')) {
        return name;
    }
    return 'on' + capitalize_1.default(name);
}
exports.callbackName = callbackName;
function registerLifecycle(instance, method, callback) {
    return instance.registerLifecycle(method, callback);
}
exports.registerLifecycle = registerLifecycle;
