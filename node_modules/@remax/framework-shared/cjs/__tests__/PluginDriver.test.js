"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = __importStar(require("react"));
var PluginDriver_1 = __importDefault(require("../PluginDriver"));
describe('PluginDriver', function () {
    it('onAppConfig', function () {
        var pluginDriver = new PluginDriver_1.default([
            {
                onAppConfig: function (_a) {
                    var config = _a.config;
                    config.foo = 1;
                    return config;
                },
            },
            {
                onAppConfig: function (_a) {
                    var config = _a.config;
                    config.bar = 1;
                    return config;
                },
            },
        ]);
        expect(pluginDriver.onAppConfig({})).toEqual({ foo: 1, bar: 1 });
    });
    it('onPageConfig', function () {
        var pluginDriver = new PluginDriver_1.default([
            {
                onPageConfig: function (_a) {
                    var config = _a.config;
                    config.foo = 1;
                    return config;
                },
            },
            {
                onPageConfig: function (_a) {
                    var config = _a.config, page = _a.page;
                    config.page = page;
                    return config;
                },
            },
        ]);
        expect(pluginDriver.onPageConfig({ config: {}, page: 'pages/foo' })).toEqual({ foo: 1, page: 'pages/foo' });
    });
    it('onAppComponent', function () {
        var App = function (props) { return props.children; };
        var wrap = function (component) {
            var Wrapped = function () { return React.createElement(component); };
            Wrapped.displayName = 'Wrapped';
            return Wrapped;
        };
        var pluginDriver = new PluginDriver_1.default([
            {
                onAppComponent: function (_a) {
                    var component = _a.component;
                    return wrap(component);
                },
            },
        ]);
        expect(pluginDriver.onAppComponent(App).displayName).toEqual('Wrapped');
    });
    it('onPageComponent', function () {
        var Page = function () { return React.createElement('view'); };
        var wrap = function (component, page) {
            var Wrapped = function () { return React.createElement(component); };
            Wrapped.displayName = page;
            return Wrapped;
        };
        var pluginDriver = new PluginDriver_1.default([
            {
                onPageComponent: function (_a) {
                    var component = _a.component, page = _a.page;
                    return wrap(component, page);
                },
            },
        ]);
        expect(pluginDriver.onPageComponent({ component: Page, page: 'pages/foo/index' }).displayName).toEqual('pages/foo/index');
    });
    it('onCreateHostComponent', function () {
        var View = function () { return React.createElement('view'); };
        var wrap = function (component) {
            var Wrapped = function () { return React.createElement(component); };
            Wrapped.displayName = 'Wrapped';
            return Wrapped;
        };
        var pluginDriver = new PluginDriver_1.default([
            {
                onCreateHostComponent: function (_a) {
                    var component = _a.component;
                    return wrap(component);
                },
            },
        ]);
        expect(pluginDriver.onCreateHostComponent(View).displayName).toEqual('Wrapped');
    });
});
