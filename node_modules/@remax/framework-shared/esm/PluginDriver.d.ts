import type { RuntimePlugin } from '@remax/types';
export default class PluginDriver {
    plugins: RuntimePlugin[];
    constructor(plugins: RuntimePlugin[]);
    onAppConfig(config: any): any;
    onPageConfig({ config, page }: {
        config: any;
        page: string;
    }): any;
    onAppComponent(component: React.ComponentType): import("react").ComponentType<{}>;
    onPageComponent({ component, page }: {
        component: React.ComponentType;
        page: string;
    }): import("react").ComponentType<{}>;
    onMiniComponent({ component, context }: {
        component: React.ComponentType;
        context: any;
    }): import("react").ComponentType<{}>;
    onCreateHostComponent<P>(component: React.ForwardRefExoticComponent<P & React.RefAttributes<any>> | React.ComponentType<P>): any;
    onCreateHostComponentElement<P>(element: React.ReactElement<P>): import("react").ReactElement<P, string | ((props: any) => import("react").ReactElement<any, string | any | (new (props: any) => import("react").Component<any, any, any>)> | null) | (new (props: any) => import("react").Component<any, any, any>)>;
}
