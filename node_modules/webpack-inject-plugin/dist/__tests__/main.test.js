"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = require("../main");
describe('injectEntry', function () {
    it('appends to the entry config correctly', function () {
        expect(main_1.injectEntry(undefined, 'foo', {})).toEqual('foo');
        expect(main_1.injectEntry(['original'], 'added', {})).toEqual([
            'added',
            'original'
        ]);
        expect(main_1.injectEntry('original', 'added', {})).toEqual(['added', 'original']);
        expect(main_1.injectEntry(['foo', 'bar'], 'baz', {})).toEqual([
            'foo',
            'baz',
            'bar'
        ]);
        expect(main_1.injectEntry(['foo', 'bar', 'baz', 'blah'], 'aaa', {})).toEqual([
            'foo',
            'bar',
            'baz',
            'aaa',
            'blah'
        ]);
        expect(main_1.injectEntry({
            foo: 'bar',
            another: ['an', 'array']
        }, 'added', {})).toEqual({
            foo: ['added', 'bar'],
            another: ['an', 'added', 'array']
        });
        // This dynamic entry function will return {foo: bar} on first call, then {foo: baz} on the next call
        var first = true;
        var entryFunc = main_1.injectEntry(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, { foo: first ? 'bar' : 'baz' }];
            });
        }); }, 'added', {});
        expect(entryFunc()).resolves.toEqual({ foo: ['added', 'bar'] });
        first = false;
        expect(entryFunc()).resolves.toEqual({ foo: ['added', 'baz'] });
    });
    it('appends to only the specified entry', function () {
        expect(main_1.injectEntry(undefined, 'foo', { entryName: 'bar' })).toBe('foo');
        expect(main_1.injectEntry({ foo: 'bar', bar: 'baz' }, 'added', { entryName: 'bar' })).toEqual({
            foo: 'bar',
            bar: ['added', 'baz']
        });
    });
    it('supports a filter function', function () {
        expect(main_1.injectEntry({ foo: 'bar', bar: 'baz', baz: 'blah' }, 'added', {
            entryName: function (e) { return e !== 'bar'; }
        })).toEqual({
            foo: ['added', 'bar'],
            bar: 'baz',
            baz: ['added', 'blah']
        });
    });
    it('throws error for unknown filter type', function () {
        expect(function () {
            main_1.injectEntry('bar', 'foo', {
                entryName: { not: 'a function ' }
            });
        }).toThrowError();
    });
    it('respects the config for ordering', function () {
        expect(main_1.injectEntry(['foo', 'bar'], 'baz', { entryOrder: main_1.ENTRY_ORDER.First })).toEqual(['baz', 'foo', 'bar']);
        expect(main_1.injectEntry(['foo', 'bar'], 'baz', { entryOrder: main_1.ENTRY_ORDER.Last })).toEqual(['foo', 'bar', 'baz']);
        expect(main_1.injectEntry(['foo', 'bar'], 'baz', { entryOrder: main_1.ENTRY_ORDER.NotLast })).toEqual(['foo', 'baz', 'bar']);
    });
    it('order config for strings', function () {
        expect(main_1.injectEntry('original', 'new', { entryOrder: main_1.ENTRY_ORDER.First })).toEqual(['new', 'original']);
        expect(main_1.injectEntry('original', 'new', { entryOrder: main_1.ENTRY_ORDER.Last })).toEqual(['original', 'new']);
        expect(main_1.injectEntry('original', 'new', { entryOrder: main_1.ENTRY_ORDER.NotLast })).toEqual(['new', 'original']);
    });
});
//# sourceMappingURL=main.test.js.map